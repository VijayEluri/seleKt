
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 09 20:20:44 PDT 2011
//----------------------------------------------------

package com.biosimilarity.seleKt.model.ill.lang.illtl;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 09 20:20:44 PDT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\005\000\002\003\007\000\002\003\003" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\004\000\002\004\010\000\002\004\014\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\006\006\000\002\007\006\000\002\010\007" +
    "\000\002\010\007\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\011\006\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\002\000\002\013\003\000\002\013\005\000\002\014\002" +
    "\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\034\006\024\012\023\014\022\020\021\022" +
    "\020\024\014\025\013\026\011\027\010\031\005\032\004" +
    "\033\017\034\006\001\002\000\054\002\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\001\002" +
    "\000\054\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\001\002\000\060\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\001\002\000\054\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\001\002\000" +
    "\032\012\023\014\022\020\021\022\020\024\014\025\013" +
    "\026\011\027\010\031\005\032\004\033\017\034\006\001" +
    "\002\000\010\011\uffe2\020\021\034\006\001\002\000\054" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\001\002\000\004\012\075\001\002\000\004" +
    "\012\072\001\002\000\046\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\022\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\001\002\000\044\002\uffff\004\uffff\005\034" +
    "\006\uffff\012\uffff\013\uffff\014\uffff\020\uffff\022\uffff\024" +
    "\uffff\025\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\001\002\000\054\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\001\002\000\032" +
    "\012\023\014\022\020\021\022\020\024\014\025\013\026" +
    "\011\027\010\031\005\032\004\033\017\034\006\001\002" +
    "\000\004\006\046\001\002\000\032\012\023\014\022\020" +
    "\021\022\020\024\014\025\013\026\011\027\010\031\005" +
    "\032\004\033\017\034\006\001\002\000\034\006\024\012" +
    "\023\014\022\020\021\022\020\024\014\025\013\026\011" +
    "\027\010\031\005\032\004\033\017\034\006\001\002\000" +
    "\032\012\023\014\022\020\021\022\020\024\014\025\013" +
    "\026\011\027\010\031\005\032\004\033\017\034\006\001" +
    "\002\000\040\002\030\004\uffe5\006\024\012\023\014\022" +
    "\020\021\022\020\024\014\025\013\026\011\027\010\031" +
    "\005\032\004\033\017\034\006\001\002\000\054\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\001\002\000\010\004\uffe4\005\034\007\033\001\002" +
    "\000\004\002\001\001\002\000\004\004\032\001\002\000" +
    "\042\002\000\004\000\006\000\012\000\013\000\014\000" +
    "\020\000\022\000\024\000\025\000\026\000\027\000\031" +
    "\000\032\000\033\000\034\000\001\002\000\036\004\uffe5" +
    "\006\024\012\023\014\022\020\021\022\020\024\014\025" +
    "\013\026\011\027\010\031\005\032\004\033\017\034\006" +
    "\001\002\000\032\012\023\014\022\020\021\022\020\024" +
    "\014\025\013\026\011\027\010\031\005\032\004\033\017" +
    "\034\006\001\002\000\046\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\012\ufffe\013\ufffe\014\ufffe\020\ufffe\022\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\001\002\000\004\004\uffe3\001\002\000\004" +
    "\007\040\001\002\000\032\012\023\014\022\020\021\022" +
    "\020\024\014\025\013\026\011\027\010\031\005\032\004" +
    "\033\017\034\006\001\002\000\004\010\042\001\002\000" +
    "\046\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\020\ufffd\022\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\001\002" +
    "\000\040\004\uffe5\006\024\012\023\013\044\014\022\020" +
    "\021\022\020\024\014\025\013\026\011\027\010\031\005" +
    "\032\004\033\017\034\006\001\002\000\054\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\001\002\000\054\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\001\002\000\032\012\023" +
    "\014\022\020\021\022\020\024\014\025\013\026\011\027" +
    "\010\031\005\032\004\033\017\034\006\001\002\000\004" +
    "\010\050\001\002\000\060\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\001\002\000\004\030\052\001\002\000\004\024\053\001" +
    "\002\000\004\012\067\001\002\000\004\015\055\001\002" +
    "\000\032\012\023\014\022\020\021\022\020\024\014\025" +
    "\013\026\011\027\010\031\005\032\004\033\017\034\006" +
    "\001\002\000\004\004\057\001\002\000\004\025\060\001" +
    "\002\000\004\012\064\001\002\000\004\015\062\001\002" +
    "\000\032\012\023\014\022\020\021\022\020\024\014\025" +
    "\013\026\011\027\010\031\005\032\004\033\017\034\006" +
    "\001\002\000\054\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\001\002\000\006\020\021" +
    "\034\006\001\002\000\004\013\066\001\002\000\004\015" +
    "\ufff0\001\002\000\006\020\021\034\006\001\002\000\004" +
    "\013\071\001\002\000\004\015\ufff1\001\002\000\032\012" +
    "\023\014\022\020\021\022\020\024\014\025\013\026\011" +
    "\027\010\031\005\032\004\033\017\034\006\001\002\000" +
    "\004\013\074\001\002\000\054\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\001\002\000" +
    "\032\012\023\014\022\020\021\022\020\024\014\025\013" +
    "\026\011\027\010\031\005\032\004\033\017\034\006\001" +
    "\002\000\004\013\077\001\002\000\054\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\001" +
    "\002\000\004\011\104\001\002\000\006\007\102\011\uffe1" +
    "\001\002\000\010\011\uffe2\020\021\034\006\001\002\000" +
    "\004\011\uffe0\001\002\000\032\012\023\014\022\020\021" +
    "\022\020\024\014\025\013\026\011\027\010\031\005\032" +
    "\004\033\017\034\006\001\002\000\054\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\001" +
    "\002\000\004\021\107\001\002\000\012\006\111\014\113" +
    "\016\110\017\114\001\002\000\004\023\uffec\001\002\000" +
    "\010\016\120\020\021\034\006\001\002\000\004\023\116" +
    "\001\002\000\006\020\021\034\006\001\002\000\004\023" +
    "\uffeb\001\002\000\004\023\uffed\001\002\000\032\012\023" +
    "\014\022\020\021\022\020\024\014\025\013\026\011\027" +
    "\010\031\005\032\004\033\017\034\006\001\002\000\054" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\001\002\000\004\007\125\001\002\000\004" +
    "\007\122\001\002\000\004\016\123\001\002\000\004\010" +
    "\124\001\002\000\004\023\uffef\001\002\000\006\020\021" +
    "\034\006\001\002\000\004\010\127\001\002\000\004\023" +
    "\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\016\002\024\003\015\004\014\005\011\011" +
    "\006\012\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\105\005" +
    "\011\011\006\012\025\001\001\000\006\011\100\014\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\050\005\011\011\006\012\025\001\001\000" +
    "\002\001\001\000\012\004\044\005\011\011\006\012\025" +
    "\001\001\000\016\002\042\003\015\004\014\005\011\011" +
    "\006\012\025\001\001\000\012\004\036\005\011\011\006" +
    "\012\025\001\001\000\016\003\026\004\014\005\011\011" +
    "\006\012\025\013\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\026\004\014\005\011\011\006\012\025" +
    "\013\035\001\001\000\012\004\034\005\011\011\006\012" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\040\005\011\011\006\012\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\026" +
    "\004\014\005\011\011\006\012\025\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\046\005\011" +
    "\011\006\012\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\055\005\011\011" +
    "\006\012\025\001\001\000\002\001\001\000\004\007\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\062\005\011\011\006\012\025\001\001\000\002\001\001" +
    "\000\004\011\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\072\005\011\011\006\012\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\075" +
    "\005\011\011\006\012\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\100\014\102\001\001\000\002\001\001\000\012\004" +
    "\104\005\011\011\006\012\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\111\001\001\000\002\001" +
    "\001\000\004\011\120\001\001\000\002\001\001\000\004" +
    "\011\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\116\005\011\011\006\012\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\125" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr pRLLExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListFormalExpr ::= FormalExpr _SYMB_3 ListFormalExpr 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListFormalExpr ::= FormalExpr 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListFormalExpr ::= 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr RESULT =null;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListRLLExpr1 ::= RLLExpr1 _SYMB_3 ListRLLExpr1 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLLExpr1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListRLLExpr1 ::= RLLExpr1 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLLExpr1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListRLLExpr1 ::= 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr RESULT =null;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLLExpr1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ValueExpr ::= _STRING_ 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ValueExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.StringLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ValueExpr ::= _INTEGER_ 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ValueExpr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.IntegerLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ValueExpr ::= _DOUBLE_ 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ValueExpr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.DecimalLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalExpr ::= _IDENT_ 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.AtomLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalExpr ::= _SYMB_12 _SYMB_2 RLLExpr2 _SYMB_4 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RLLPtrn ::= _SYMB_11 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn RESULT =null;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Unit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLPtrn",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RLLPtrn ::= _SYMB_10 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn RESULT =null;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Wildcard(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLPtrn",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RLLPtrn ::= _SYMB_8 FormalExpr 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Extraction(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLPtrn",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RLLPtrn ::= _SYMB_2 _SYMB_10 _SYMB_3 FormalExpr _SYMB_4 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_4 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InclusionRight(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLPtrn",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RLLPtrn ::= _SYMB_2 FormalExpr _SYMB_3 _SYMB_10 _SYMB_4 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InclusionLeft(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLPtrn",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RLLRightPtrn ::= _SYMB_17 _SYMB_6 FormalExpr _SYMB_7 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLRightPtrn RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InRight(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLRightPtrn",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RLLLeftPtrn ::= _SYMB_16 _SYMB_6 FormalExpr _SYMB_7 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLLeftPtrn RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InLeft(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLLeftPtrn",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RLLExpr3 ::= _SYMB_6 RLLExpr _SYMB_7 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr3",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RLLExpr3 ::= ValueExpr 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ValueExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr3",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RLLExpr3 ::= FormalExpr 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr3",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RLLExpr2 ::= RLLExpr3 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RLLExpr2 ::= _SYMB_14 RLLExpr2 _SYMB_20 RLLLeftPtrn _SYMB_9 RLLExpr2 _SYMB_0 RLLRightPtrn _SYMB_9 RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLLeftPtrn p_4 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLLeftPtrn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_6 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLRightPtrn p_8 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLRightPtrn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_10 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Selection(p_2,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RLLExpr2 ::= _SYMB_19 RLLExpr2 _SYMB_13 RLLPtrn _SYMB_15 RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn p_4 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLPtrn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_6 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Deconstruction(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RLLExpr2 ::= _SYMB_8 RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Duration(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RLLExpr2 ::= _SYMB_17 _SYMB_6 RLLExpr2 _SYMB_7 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InjectionRight(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RLLExpr2 ::= _SYMB_16 _SYMB_6 RLLExpr2 _SYMB_7 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.InjectionLeft(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RLLExpr2 ::= _SYMB_18 ListFormalExpr _SYMB_5 RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListFormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_4 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Abstraction(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RLLExpr1 ::= RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RLLExpr1 ::= _SYMB_2 RLLExpr2 _SYMB_3 RLLExpr2 _SYMB_4 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_4 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Inclusion(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RLLExpr1 ::= RLLExpr1 _SYMB_1 RLLExpr2 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_3 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Separation(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RLLExpr ::= RLLExpr1 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RLLExpr ::= RLLExpr ListRLLExpr1 _SYMB_0 
            {
              com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr p_1 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr p_2 = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.ListRLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.Application(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLLExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RLLExpr EOF 
            {
              Object RESULT =null;
		com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr start_val = (com.biosimilarity.seleKt.model.ill.lang.illtl.Absyn.RLLExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

