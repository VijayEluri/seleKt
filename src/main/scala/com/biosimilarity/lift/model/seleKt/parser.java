
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 17 05:37:53 PDT 2010
//----------------------------------------------------

package com.biosimilarity.lift.model.seleKt;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 17 05:37:53 PDT 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\003\005\000\002\003\003" +
    "\000\002\004\006\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\005\000\002\005\003\000\002" +
    "\006\005\000\002\007\007\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\013\007\000\002\014\003\000" +
    "\002\014\003\000\002\015\005\000\002\016\005\000\002" +
    "\016\005\000\002\017\004\000\002\020\003\000\002\021" +
    "\003\000\002\021\004\000\002\021\004\000\002\022\005" +
    "\000\002\022\003\000\002\023\005\000\002\023\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\025\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\006\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\032\006\000\002\033\005\000\002\033\003\000\002\034" +
    "\005\000\002\034\003\000\002\035\004\000\002\035\003" +
    "\000\002\036\004\000\002\036\003\000\002\036\005\000" +
    "\002\037\005\000\002\037\003\000\002\040\006\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\043\006\000\002\044\005\000" +
    "\002\044\003\000\002\045\005\000\002\045\003\000\002" +
    "\046\004\000\002\046\003\000\002\047\004\000\002\047" +
    "\003\000\002\047\005\000\002\050\003\000\002\050\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\054" +
    "\005\000\002\054\003\000\002\055\006\000\002\055\003" +
    "\000\002\055\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\003\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\060\006\000\002\060\003\000\002\061" +
    "\005\000\002\061\003\000\002\062\005\000\002\062\003" +
    "\000\002\063\004\000\002\063\003\000\002\064\003\000" +
    "\002\064\005\000\002\065\004\000\002\065\005\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\003\000\002\067\003" +
    "\000\002\070\007\000\002\071\005\000\002\072\004\000" +
    "\002\073\005\000\002\073\003\000\002\074\004\000\002" +
    "\075\003\000\002\076\003\000\002\077\003\000\002\100" +
    "\003\000\002\101\003\000\002\102\003\000\002\103\002" +
    "\000\002\103\003\000\002\103\005\000\002\104\002\000" +
    "\002\104\003\000\002\104\005\000\002\105\002\000\002" +
    "\105\003\000\002\105\005\000\002\106\002\000\002\106" +
    "\003\000\002\106\005\000\002\107\002\000\002\107\003" +
    "\000\002\107\005\000\002\110\002\000\002\110\004\000" +
    "\002\111\002\000\002\111\003\000\002\111\005\000\002" +
    "\112\002\000\002\112\004\000\002\113\002\000\002\113" +
    "\003\000\002\113\005\000\002\114\002\000\002\114\004" +
    "\000\002\115\002\000\002\115\003\000\002\115\005\000" +
    "\002\116\002\000\002\116\003\000\002\116\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\054\007\012\015\006\024\004\030\043\033" +
    "\040\034\036\035\034\044\027\047\026\050\025\051\024" +
    "\053\023\054\010\055\007\061\005\062\022\063\050\064" +
    "\021\065\044\066\013\067\011\001\002\000\004\066\u0100" +
    "\001\002\000\030\007\062\024\004\030\043\033\040\034" +
    "\036\035\034\062\022\063\050\064\021\065\044\066\013" +
    "\001\002\000\126\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\017\ufff1\020\ufff1" +
    "\022\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\001\002\000" +
    "\004\016\226\001\002\000\030\007\062\024\004\030\043" +
    "\033\040\034\036\035\034\062\022\063\050\064\021\065" +
    "\044\066\013\001\002\000\126\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\001\002\000\054\007\012\015\006\024\004\030\043\033" +
    "\040\034\036\035\034\044\027\047\026\050\025\051\024" +
    "\053\023\054\010\055\007\061\005\062\022\063\050\064" +
    "\021\065\044\066\013\067\011\001\002\000\060\006\uff98" +
    "\007\uff98\010\uff98\017\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\033\uff98\034\uff98\035\uff98\043\uff98\047\uff98" +
    "\051\uff98\053\uff98\054\uff98\061\uff98\062\uff98\063\uff98\064" +
    "\uff98\065\uff98\066\uff98\001\002\000\024\002\ufffc\004\ufffc" +
    "\005\ufffc\010\ufffc\011\ufffc\014\ufffc\017\ufffc\043\ufffc\046" +
    "\ufffc\001\002\000\056\006\uff9f\007\uff9f\010\uff9f\017\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\030\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\043\uff9f\047\uff9f\051\uff9f\053\uff9f\054\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002\000" +
    "\024\002\ufff6\004\ufff6\005\ufff6\010\ufff6\011\ufff6\014\ufff6" +
    "\017\ufff6\043\ufff6\046\ufff6\001\002\000\006\002\220\004" +
    "\057\001\002\000\024\002\ufffe\004\ufffe\005\216\010\ufffe" +
    "\011\ufffe\014\ufffe\017\ufffe\043\ufffe\046\ufffe\001\002\000" +
    "\120\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\013\uff8d" +
    "\017\uff8d\020\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\043\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\001\002\000\120\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\013\uff8b\017\uff8b\020\uff8b\022\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\043\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\057\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066" +
    "\uff8b\067\uff8b\070\uff8b\001\002\000\030\007\062\024\004" +
    "\030\043\033\040\034\036\035\034\062\022\063\050\064" +
    "\021\065\044\066\013\001\002\000\054\006\uff9d\007\uff9d" +
    "\010\uff9d\017\uff9d\024\uff9d\026\uff9d\030\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\043\uff9d\047\uff9d\051\uff9d\053\uff9d\054\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001" +
    "\002\000\060\007\012\012\110\015\006\024\004\030\043" +
    "\033\040\034\036\035\034\044\027\046\uff7a\047\026\050" +
    "\025\051\024\053\023\054\010\055\007\061\005\062\022" +
    "\063\050\064\021\065\044\066\013\067\011\001\002\000" +
    "\010\027\uff6e\030\043\066\013\001\002\000\126\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\017\ufff8\020\ufff8\022\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\057" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\001\002\000\052\006\uffe6\007\uff6b\017" +
    "\uffe6\024\uff6b\026\uff6b\030\uff6b\033\uff6b\034\uff6b\035\uff6b" +
    "\043\uffe6\047\uff6b\051\uff6b\053\uff6b\054\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\001\002\000\120" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013\uff89\017" +
    "\uff89\020\uff89\022\uff89\024\uff89\025\uff89\026\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\043\uff89\045\uff89\046\uff89\047\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\057\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\001\002\000\054\006\uffa0\007\uffa0\010\uffa0\017\uffa0\024" +
    "\uffa0\026\uffa0\030\uffa0\033\uffa0\034\uffa0\035\uffa0\043\uffa0" +
    "\047\uffa0\051\uffa0\053\uffa0\054\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002\000\054\006\uffa3" +
    "\007\uffa3\010\uffa3\017\uffa3\024\uffa3\026\uffa3\030\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\043\uffa3\047\uffa3\051\uffa3\053\uffa3" +
    "\054\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\001\002\000\024\007\062\024\004\033\040\034\036" +
    "\035\034\062\022\063\050\064\021\065\044\001\002\000" +
    "\072\006\uff92\007\uff92\010\uff92\017\uff92\024\uff92\025\uff92" +
    "\026\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\043\uff92\047\uff92" +
    "\051\uff92\053\uff92\054\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\001\002\000\016\007\053\015\006" +
    "\044\027\050\025\055\007\067\011\001\002\000\072\006" +
    "\uff94\007\uff94\010\uff94\017\uff94\024\uff94\025\uff94\026\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\043\uff94\047\uff94\051\uff94" +
    "\053\uff94\054\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\001\002\000\022\007\062\024\004\034\036" +
    "\035\034\062\022\063\050\064\021\065\044\001\002\000" +
    "\072\006\uff96\007\uff96\010\uff96\017\uff96\024\uff96\025\uff96" +
    "\026\uff96\030\uff96\031\uff96\032\064\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\043\uff96\047\uff96" +
    "\051\uff96\053\uff96\054\uff96\061\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\066\uff96\001\002\000\054\006\uffa1\007\uffa1" +
    "\010\uffa1\017\uffa1\024\uffa1\026\uffa1\030\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\043\uffa1\047\uffa1\051\uffa1\053\uffa1\054\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\001" +
    "\002\000\004\024\073\001\002\000\120\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\013\uff8c\017\uff8c\020\uff8c\022" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\043\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\057\uff8c\061\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\001\002\000\060" +
    "\006\uff9e\007\uff9e\010\uff9e\017\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\030\uff9e\031\061\033\uff9e\034\uff9e\035\uff9e\043\uff9e" +
    "\047\uff9e\051\uff9e\053\uff9e\054\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\001\002\000\126\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\017\ufffa\020\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\057" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\001\002\000\004\006\052\001\002\000" +
    "\120\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\013\uff8a" +
    "\017\uff8a\020\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\043\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\057\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\001\002\000\072\006\uff91\007\uff91\010\uff91\017\uff91" +
    "\024\uff91\025\uff91\026\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\043\uff91\047\uff91\051\uff91\053\uff91\054\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\001\002\000\016" +
    "\007\053\015\006\044\027\050\025\055\007\067\011\001" +
    "\002\000\054\007\012\015\006\024\004\030\043\033\040" +
    "\034\036\035\034\044\027\047\026\050\025\051\024\053" +
    "\023\054\010\055\007\061\005\062\022\063\050\064\021" +
    "\065\044\066\013\067\011\001\002\000\024\002\ufffd\004" +
    "\ufffd\005\ufffd\010\ufffd\011\ufffd\014\ufffd\017\ufffd\043\ufffd" +
    "\046\ufffd\001\002\000\006\004\057\010\056\001\002\000" +
    "\126\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\014\ufff7\017\ufff7\020\ufff7\022\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\001\002\000\054\007\012" +
    "\015\006\024\004\030\043\033\040\034\036\035\034\044" +
    "\027\047\026\050\025\051\024\053\023\054\010\055\007" +
    "\061\005\062\022\063\050\064\021\065\044\066\013\067" +
    "\011\001\002\000\022\002\000\004\000\010\000\011\000" +
    "\014\000\017\000\043\000\046\000\001\002\000\024\007" +
    "\062\024\004\033\040\034\036\035\034\062\022\063\050" +
    "\064\021\065\044\001\002\000\042\007\062\024\004\030" +
    "\043\033\040\034\036\035\034\047\026\051\024\053\023" +
    "\054\010\061\005\062\022\063\050\064\021\065\044\066" +
    "\013\001\002\000\072\006\uff97\007\uff97\010\uff97\017\uff97" +
    "\024\uff97\025\uff97\026\uff97\030\uff97\031\uff97\032\064\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\043\uff97\047\uff97\051\uff97\053\uff97\054\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\001\002\000\024" +
    "\007\062\024\004\033\040\034\036\035\034\062\022\063" +
    "\050\064\021\065\044\001\002\000\072\006\uff95\007\uff95" +
    "\010\uff95\017\uff95\024\uff95\025\uff95\026\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\043\uff95\047\uff95\051\uff95\053\uff95\054" +
    "\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95" +
    "\001\002\000\046\007\uff6b\010\067\024\uff6b\026\uff6b\030" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\047\uff6b\051\uff6b\053\uff6b" +
    "\054\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066" +
    "\uff6b\001\002\000\120\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\013\uff8e\017\uff8e\020\uff8e\022\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\043\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\057\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\001\002\000\044\007\062\024\004" +
    "\026\072\030\043\033\040\034\036\035\034\047\026\051" +
    "\024\053\023\054\010\061\005\062\022\063\050\064\021" +
    "\065\044\066\013\001\002\000\044\007\uff6a\024\uff6a\026" +
    "\uff6a\030\uff6a\033\uff6a\034\uff6a\035\uff6a\047\uff6a\051\uff6a" +
    "\053\uff6a\054\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065" +
    "\uff6a\066\uff6a\001\002\000\054\006\uffa4\007\uffa4\010\uffa4" +
    "\017\uffa4\024\uffa4\026\uffa4\030\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\043\uffa4\047\uffa4\051\uffa4\053\uffa4\054\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\030\007\062\024\004\030\043\033\040\034\036\035\034" +
    "\062\022\063\050\064\021\065\044\066\013\001\002\000" +
    "\004\025\075\001\002\000\060\006\uff99\007\uff99\010\uff99" +
    "\017\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\033" +
    "\uff99\034\uff99\035\uff99\043\uff99\047\uff99\051\uff99\053\uff99" +
    "\054\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\001\002\000\072\006\uff93\007\uff93\010\uff93\017\uff93" +
    "\024\uff93\025\uff93\026\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93" +
    "\043\uff93\047\uff93\051\uff93\053\uff93\054\uff93\061\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\066\uff93\001\002\000\120" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\013\uff8f\017" +
    "\uff8f\020\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\043\uff8f\045\uff8f\046\uff8f\047\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\057\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f" +
    "\001\002\000\006\031\061\036\101\001\002\000\072\006" +
    "\uff90\007\uff90\010\uff90\017\uff90\024\uff90\025\uff90\026\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\043\uff90\047\uff90\051\uff90" +
    "\053\uff90\054\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\001\002\000\004\027\106\001\002\000\006" +
    "\027\uff6d\043\104\001\002\000\010\027\uff6e\030\043\066" +
    "\013\001\002\000\004\027\uff6c\001\002\000\030\007\062" +
    "\024\004\030\043\033\040\034\036\035\034\062\022\063" +
    "\050\064\021\065\044\066\013\001\002\000\054\006\uffa2" +
    "\007\uffa2\010\uffa2\017\uffa2\024\uffa2\026\uffa2\030\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\043\uffa2\047\uffa2\051\uffa2\053\uffa2" +
    "\054\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\001\002\000\006\013\uff71\021\124\001\002\000\006" +
    "\043\121\046\uff79\001\002\000\004\046\117\001\002\000" +
    "\014\004\057\011\ufff3\014\ufff3\043\ufff3\046\ufff3\001\002" +
    "\000\004\011\115\001\002\000\056\007\012\012\110\015" +
    "\006\024\004\030\043\033\040\034\036\035\034\044\027" +
    "\047\026\050\025\051\024\053\023\054\010\055\007\061" +
    "\005\062\022\063\050\064\021\065\044\066\013\067\011" +
    "\001\002\000\006\043\ufff5\046\ufff5\001\002\000\016\007" +
    "\053\015\006\044\027\050\025\055\007\067\011\001\002" +
    "\000\126\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\017\ufffb\020\ufffb\022\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\043\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002\000\060\007" +
    "\012\012\110\015\006\024\004\030\043\033\040\034\036" +
    "\035\034\044\027\046\uff7a\047\026\050\025\051\024\053" +
    "\023\054\010\055\007\061\005\062\022\063\050\064\021" +
    "\065\044\066\013\067\011\001\002\000\004\046\uff78\001" +
    "\002\000\006\013\uff70\043\212\001\002\000\030\007\143" +
    "\030\151\033\150\034\147\035\146\047\131\053\154\054" +
    "\141\061\137\067\132\070\145\001\002\000\004\013\126" +
    "\001\002\000\056\007\012\012\110\015\006\024\004\030" +
    "\043\033\040\034\036\035\034\044\027\047\026\050\025" +
    "\051\024\053\023\054\010\055\007\061\005\062\022\063" +
    "\050\064\021\065\044\066\013\067\011\001\002\000\004" +
    "\014\130\001\002\000\012\011\ufff4\014\ufff4\043\ufff4\046" +
    "\ufff4\001\002\000\006\027\uff69\030\151\001\002\000\056" +
    "\005\uffaf\007\uffaf\010\uffaf\013\uffaf\020\uffaf\025\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\043\uffaf\046\uffaf\047\uffaf\053\uffaf\054\uffaf\061" +
    "\uffaf\067\uffaf\070\uffaf\001\002\000\056\005\uffc6\007\uffc6" +
    "\010\uffc6\013\uffc6\020\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\043\uffc6" +
    "\046\uffc6\047\uffc6\053\uffc6\054\uffc6\061\uffc6\067\uffc6\070" +
    "\uffc6\001\002\000\056\005\uffc8\007\uffc8\010\uffc8\013\uffc8" +
    "\020\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\043\uffc8\046\uffc8\047\uffc8" +
    "\053\uffc8\054\uffc8\061\uffc8\067\uffc8\070\uffc8\001\002\000" +
    "\056\005\uffca\007\uffca\010\uffca\013\uffca\020\uffca\025\uffca" +
    "\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\043\uffca\046\uffca\047\uffca\053\uffca\054\uffca" +
    "\061\uffca\067\uffca\070\uffca\001\002\000\056\005\uffcc\007" +
    "\uffcc\010\uffcc\013\uffcc\020\uffcc\025\uffcc\026\uffcc\030\uffcc" +
    "\031\uffcc\032\160\033\uffcc\034\uffcc\035\uffcc\036\uffcc\043" +
    "\uffcc\046\uffcc\047\uffcc\053\uffcc\054\uffcc\061\uffcc\067\uffcc" +
    "\070\uffcc\001\002\000\026\007\143\030\151\033\150\034" +
    "\147\035\146\053\154\054\141\061\137\067\132\070\145" +
    "\001\002\000\046\005\uffd6\007\uffd6\010\uffd6\013\uffd6\020" +
    "\uffd6\026\uffd6\030\uffd6\033\uffd6\034\uffd6\035\uffd6\043\uffd6" +
    "\046\uffd6\047\uffd6\053\uffd6\054\uffd6\061\uffd6\067\uffd6\070" +
    "\uffd6\001\002\000\026\007\143\030\151\033\150\034\147" +
    "\035\146\053\154\054\141\061\137\067\132\070\145\001" +
    "\002\000\046\005\uffd8\007\uffd8\010\uffd8\013\uffd8\020\uffd8" +
    "\026\uffd8\030\uffd8\033\uffd8\034\uffd8\035\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\053\uffd8\054\uffd8\061\uffd8\067\uffd8\070\uffd8" +
    "\001\002\000\030\007\143\030\151\033\150\034\147\035" +
    "\146\047\131\053\154\054\141\061\137\067\132\070\145" +
    "\001\002\000\050\005\uffd5\007\uffd5\010\uffd5\013\uffd5\020" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\043\uffd5\046\uffd5\047\uffd5\053\uffd5\054\uffd5\061\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\056\005\uffae\007\uffae\010\uffae" +
    "\013\uffae\020\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\043\uffae\046\uffae" +
    "\047\uffae\053\uffae\054\uffae\061\uffae\067\uffae\070\uffae\001" +
    "\002\000\014\033\150\034\147\035\146\067\132\070\145" +
    "\001\002\000\020\007\062\024\004\034\036\062\022\063" +
    "\050\064\021\065\044\001\002\000\012\034\147\035\146" +
    "\067\132\070\145\001\002\000\004\024\167\001\002\000" +
    "\050\005\uffd3\007\uffd3\010\uffd3\013\uffd3\020\uffd3\025\uffd3" +
    "\026\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3\043\uffd3\046" +
    "\uffd3\047\uffd3\053\uffd3\054\uffd3\061\uffd3\067\uffd3\070\uffd3" +
    "\001\002\000\044\005\uffe7\007\uff66\013\uffe7\020\uffe7\026" +
    "\uff66\030\uff66\033\uff66\034\uff66\035\uff66\043\uffe7\046\uffe7" +
    "\047\uff66\053\uff66\054\uff66\061\uff66\067\uff66\070\uff66\001" +
    "\002\000\026\007\143\030\151\033\150\034\147\035\146" +
    "\053\154\054\141\061\137\067\132\070\145\001\002\000" +
    "\052\005\uffd4\007\uffd4\010\uffd4\013\uffd4\020\uffd4\025\uffd4" +
    "\026\uffd4\030\uffd4\031\156\033\uffd4\034\uffd4\035\uffd4\043" +
    "\uffd4\046\uffd4\047\uffd4\053\uffd4\054\uffd4\061\uffd4\067\uffd4" +
    "\070\uffd4\001\002\000\014\033\150\034\147\035\146\067" +
    "\132\070\145\001\002\000\056\005\uffcd\007\uffcd\010\uffcd" +
    "\013\uffcd\020\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032" +
    "\160\033\uffcd\034\uffcd\035\uffcd\036\uffcd\043\uffcd\046\uffcd" +
    "\047\uffcd\053\uffcd\054\uffcd\061\uffcd\067\uffcd\070\uffcd\001" +
    "\002\000\014\033\150\034\147\035\146\067\132\070\145" +
    "\001\002\000\056\005\uffcb\007\uffcb\010\uffcb\013\uffcb\020" +
    "\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\043\uffcb\046\uffcb\047\uffcb\053" +
    "\uffcb\054\uffcb\061\uffcb\067\uffcb\070\uffcb\001\002\000\026" +
    "\007\143\030\151\033\150\034\147\035\146\053\154\054" +
    "\141\061\137\067\132\070\145\001\002\000\050\005\uffd1" +
    "\007\uffd1\010\uffd1\013\uffd1\020\uffd1\025\uffd1\026\uffd1\030" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\043\uffd1\046\uffd1\047\uffd1" +
    "\053\uffd1\054\uffd1\061\uffd1\067\uffd1\070\uffd1\001\002\000" +
    "\032\007\143\026\165\030\151\033\150\034\147\035\146" +
    "\047\131\053\154\054\141\061\137\067\132\070\145\001" +
    "\002\000\046\005\uffd9\007\uffd9\010\uffd9\013\uffd9\020\uffd9" +
    "\026\uffd9\030\uffd9\033\uffd9\034\uffd9\035\uffd9\043\uffd9\046" +
    "\uffd9\047\uffd9\053\uffd9\054\uffd9\061\uffd9\067\uffd9\070\uffd9" +
    "\001\002\000\032\007\uff65\026\uff65\030\uff65\033\uff65\034" +
    "\uff65\035\uff65\047\uff65\053\uff65\054\uff65\061\uff65\067\uff65" +
    "\070\uff65\001\002\000\026\007\143\030\151\033\150\034" +
    "\147\035\146\053\154\054\141\061\137\067\132\070\145" +
    "\001\002\000\004\025\171\001\002\000\052\005\uffce\007" +
    "\uffce\010\uffce\013\uffce\020\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\033\uffce\034\uffce\035\uffce\043\uffce\046\uffce\047" +
    "\uffce\053\uffce\054\uffce\061\uffce\067\uffce\070\uffce\001\002" +
    "\000\056\005\uffc9\007\uffc9\010\uffc9\013\uffc9\020\uffc9\025" +
    "\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\043\uffc9\046\uffc9\047\uffc9\053\uffc9\054" +
    "\uffc9\061\uffc9\067\uffc9\070\uffc9\001\002\000\056\005\uffc7" +
    "\007\uffc7\010\uffc7\013\uffc7\020\uffc7\025\uffc7\026\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\043\uffc7\046\uffc7\047\uffc7\053\uffc7\054\uffc7\061\uffc7\067" +
    "\uffc7\070\uffc7\001\002\000\006\031\156\036\175\001\002" +
    "\000\056\005\uffc5\007\uffc5\010\uffc5\013\uffc5\020\uffc5\025" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\043\uffc5\046\uffc5\047\uffc5\053\uffc5\054" +
    "\uffc5\061\uffc5\067\uffc5\070\uffc5\001\002\000\034\007\uff66" +
    "\010\177\026\uff66\030\uff66\033\uff66\034\uff66\035\uff66\047" +
    "\uff66\053\uff66\054\uff66\061\uff66\067\uff66\070\uff66\001\002" +
    "\000\050\005\uffd2\007\uffd2\010\uffd2\013\uffd2\020\uffd2\025" +
    "\uffd2\026\uffd2\030\uffd2\033\uffd2\034\uffd2\035\uffd2\043\uffd2" +
    "\046\uffd2\047\uffd2\053\uffd2\054\uffd2\061\uffd2\067\uffd2\070" +
    "\uffd2\001\002\000\026\007\143\030\151\033\150\034\147" +
    "\035\146\053\154\054\141\061\137\067\132\070\145\001" +
    "\002\000\050\005\uffcf\007\uffcf\010\uffcf\013\uffcf\020\uffcf" +
    "\025\uffcf\026\uffcf\030\uffcf\033\uffcf\034\uffcf\035\uffcf\043" +
    "\uffcf\046\uffcf\047\uffcf\053\uffcf\054\uffcf\061\uffcf\067\uffcf" +
    "\070\uffcf\001\002\000\026\007\143\030\151\033\150\034" +
    "\147\035\146\053\154\054\141\061\137\067\132\070\145" +
    "\001\002\000\050\005\uffd0\007\uffd0\010\uffd0\013\uffd0\020" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\043\uffd0\046\uffd0\047\uffd0\053\uffd0\054\uffd0\061\uffd0\067" +
    "\uffd0\070\uffd0\001\002\000\006\027\uff68\043\210\001\002" +
    "\000\004\027\206\001\002\000\026\007\143\030\151\033" +
    "\150\034\147\035\146\053\154\054\141\061\137\067\132" +
    "\070\145\001\002\000\046\005\uffd7\007\uffd7\010\uffd7\013" +
    "\uffd7\020\uffd7\026\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\043\uffd7\046\uffd7\047\uffd7\053\uffd7\054\uffd7\061\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\006\027\uff69\030\151\001\002" +
    "\000\004\027\uff67\001\002\000\006\013\uff71\021\124\001" +
    "\002\000\004\013\uff6f\001\002\000\030\007\062\024\004" +
    "\030\043\033\040\034\036\035\034\062\022\063\050\064" +
    "\021\065\044\066\013\001\002\000\054\006\uff9c\007\uff9c" +
    "\010\uff9c\017\uff9c\024\uff9c\026\uff9c\030\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\043\uff9c\047\uff9c\051\uff9c\053\uff9c\054\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\001" +
    "\002\000\054\007\012\015\006\024\004\030\043\033\040" +
    "\034\036\035\034\044\027\047\026\050\025\051\024\053" +
    "\023\054\010\055\007\061\005\062\022\063\050\064\021" +
    "\065\044\066\013\067\011\001\002\000\022\002\uffff\004" +
    "\uffff\010\uffff\011\uffff\014\uffff\017\uffff\043\uffff\046\uffff" +
    "\001\002\000\004\002\001\001\002\000\050\006\uffe6\007" +
    "\uff6b\010\067\024\uff6b\026\uff6b\030\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\047\uff6b\051\uff6b\053\uff6b\054\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\001\002\000\030" +
    "\007\062\024\004\030\043\033\040\034\036\035\034\062" +
    "\022\063\050\064\021\065\044\066\013\001\002\000\054" +
    "\006\uff9a\007\uff9a\010\uff9a\017\uff9a\024\uff9a\026\uff9a\030" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\043\uff9a\047\uff9a\051\uff9a" +
    "\053\uff9a\054\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\001\002\000\126\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\017" +
    "\ufff9\020\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\001\002\000\126\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\057\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\001\002\000" +
    "\046\007\062\017\uff74\021\124\024\004\030\043\033\040" +
    "\034\036\035\034\047\026\051\024\053\023\054\010\061" +
    "\005\062\022\063\050\064\021\065\044\066\013\001\002" +
    "\000\126\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\013\uffef\014\uffef\017\uffef\020\uffef\022\uffef" +
    "\024\uffef\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\043\uffef\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053" +
    "\uffef\054\uffef\057\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\001\002\000\004\017" +
    "\375\001\002\000\006\017\uff73\043\373\001\002\000\004" +
    "\005\233\001\002\000\030\007\062\017\uff77\021\124\024" +
    "\004\033\040\034\036\035\034\062\022\063\050\064\021" +
    "\065\044\001\002\000\006\017\uff76\043\371\001\002\000" +
    "\006\017\uffec\043\uffec\001\002\000\004\017\370\001\002" +
    "\000\016\024\365\025\363\031\061\037\366\040\364\041" +
    "\362\001\002\000\006\017\uffeb\043\uffeb\001\002\000\006" +
    "\020\243\046\242\001\002\000\012\007\254\021\262\023" +
    "\261\024\260\001\002\000\060\007\012\015\006\024\004" +
    "\030\043\033\040\034\036\035\034\044\027\047\026\050" +
    "\025\051\024\053\023\054\010\055\007\056\245\060\244" +
    "\061\005\062\022\063\050\064\021\065\044\066\013\067" +
    "\011\001\002\000\004\024\004\001\002\000\004\024\004" +
    "\001\002\000\006\017\uffea\043\uffea\001\002\000\010\004" +
    "\057\017\uffe5\043\uffe5\001\002\000\006\017\uff88\043\uff88" +
    "\001\002\000\006\017\uffe4\043\uffe4\001\002\000\006\017" +
    "\uff87\043\uff87\001\002\000\006\017\uffe3\043\uffe3\001\002" +
    "\000\012\007\254\021\262\023\261\024\260\001\002\000" +
    "\014\004\uffdf\010\uffdf\017\uffdf\022\uffdf\043\uffdf\001\002" +
    "\000\012\007\254\021\262\023\261\024\260\001\002\000" +
    "\014\004\266\010\uffe1\017\uffe1\022\uffe1\043\uffe1\001\002" +
    "\000\012\007\254\021\262\023\261\024\260\001\002\000" +
    "\012\007\254\021\262\023\261\024\260\001\002\000\032" +
    "\007\304\030\311\033\307\034\306\035\305\045\271\047" +
    "\270\052\316\053\313\054\302\057\300\061\275\001\002" +
    "\000\010\017\uffe9\022\264\043\uffe9\001\002\000\012\007" +
    "\254\021\262\023\261\024\260\001\002\000\014\004\266" +
    "\010\uffe2\017\uffe2\022\uffe2\043\uffe2\001\002\000\012\007" +
    "\254\021\262\023\261\024\260\001\002\000\014\004\uffe0" +
    "\010\uffe0\017\uffe0\022\uffe0\043\uffe0\001\002\000\006\027" +
    "\uff64\030\311\001\002\000\056\004\uffab\007\uffab\010\uffab" +
    "\017\uffab\022\uffab\025\uffab\026\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\043\uffab\045\uffab" +
    "\047\uffab\052\uffab\053\uffab\054\uffab\057\uffab\061\uffab\001" +
    "\002\000\050\004\uffc0\007\uffc0\010\uffc0\017\uffc0\022\uffc0" +
    "\025\uffc0\026\uffc0\030\uffc0\033\uffc0\034\uffc0\035\uffc0\043" +
    "\uffc0\045\uffc0\047\uffc0\052\uffc0\053\uffc0\054\uffc0\057\uffc0" +
    "\061\uffc0\001\002\000\056\004\uffb3\007\uffb3\010\uffb3\017" +
    "\uffb3\022\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\043\uffb3\045\uffb3\047" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\057\uffb3\061\uffb3\001\002" +
    "\000\050\004\uffbf\007\uffbf\010\uffbf\017\uffbf\022\uffbf\025" +
    "\uffbf\026\uffbf\030\uffbf\033\uffbf\034\uffbf\035\uffbf\043\uffbf" +
    "\045\uffbf\047\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\061" +
    "\uffbf\001\002\000\030\007\304\030\311\033\307\034\306" +
    "\035\305\045\271\052\316\053\313\054\302\057\300\061" +
    "\275\001\002\000\056\004\uffb5\007\uffb5\010\uffb5\017\uffb5" +
    "\022\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\043\uffb5\045\uffb5\047\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\057\uffb5\061\uffb5\001\002\000" +
    "\056\004\uffb7\007\uffb7\010\uffb7\017\uffb7\022\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\332\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\043\uffb7\045\uffb7\047\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\057\uffb7\061\uffb7\001\002\000\056\004\uffac\007" +
    "\uffac\010\uffac\017\uffac\022\uffac\025\uffac\026\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\043" +
    "\uffac\045\uffac\047\uffac\052\uffac\053\uffac\054\uffac\057\uffac" +
    "\061\uffac\001\002\000\050\004\uffdc\007\uff61\010\uffdc\017" +
    "\uffdc\022\uffdc\025\uffdc\026\uff61\030\uff61\033\uff61\034\uff61" +
    "\035\uff61\043\uffdc\045\uff61\047\uff61\052\uff61\053\uff61\054" +
    "\uff61\057\uff61\061\uff61\001\002\000\030\007\304\030\311" +
    "\033\307\034\306\035\305\045\271\052\316\053\313\054" +
    "\302\057\300\061\275\001\002\000\052\004\uffbe\007\uffbe" +
    "\010\uffbe\017\uffbe\022\uffbe\025\uffbe\026\uffbe\030\uffbe\031" +
    "\327\033\uffbe\034\uffbe\035\uffbe\043\uffbe\045\uffbe\047\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\057\uffbe\061\uffbe\001\002\000" +
    "\032\007\304\030\311\033\307\034\306\035\305\045\271" +
    "\047\270\052\316\053\313\054\302\057\300\061\275\001" +
    "\002\000\016\033\307\034\306\035\305\045\271\052\316" +
    "\057\300\001\002\000\020\007\062\024\004\034\036\062" +
    "\022\063\050\064\021\065\044\001\002\000\014\034\306" +
    "\035\305\045\271\052\316\057\300\001\002\000\056\004" +
    "\uffb1\007\uffb1\010\uffb1\017\uffb1\022\uffb1\025\uffb1\026\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\043\uffb1\045\uffb1\047\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\057\uffb1\061\uffb1\001\002\000\004\024\321\001\002\000" +
    "\056\004\uffad\007\uffad\010\uffad\017\uffad\022\uffad\025\uffad" +
    "\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\043\uffad\045\uffad\047\uffad\052\uffad\053\uffad" +
    "\054\uffad\057\uffad\061\uffad\001\002\000\030\007\304\030" +
    "\311\033\307\034\306\035\305\045\271\052\316\053\313" +
    "\054\302\057\300\061\275\001\002\000\050\004\uffc1\007" +
    "\uffc1\010\uffc1\017\uffc1\022\uffc1\025\uffc1\026\uffc1\030\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\043\uffc1\045\uffc1\047\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\057\uffc1\061\uffc1\001\002\000\050" +
    "\004\uffc3\007\uffc3\010\uffc3\017\uffc3\022\uffc3\025\uffc3\026" +
    "\uffc3\030\uffc3\033\uffc3\034\uffc3\035\uffc3\043\uffc3\045\uffc3" +
    "\047\uffc3\052\uffc3\053\uffc3\054\uffc3\057\uffc3\061\uffc3\001" +
    "\002\000\056\004\uffaa\007\uffaa\010\uffaa\017\uffaa\022\uffaa" +
    "\025\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\043\uffaa\045\uffaa\047\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\057\uffaa\061\uffaa\001\002\000\030\007" +
    "\304\030\311\033\307\034\306\035\305\045\271\052\316" +
    "\053\313\054\302\057\300\061\275\001\002\000\050\004" +
    "\uffbc\007\uffbc\010\uffbc\017\uffbc\022\uffbc\025\uffbc\026\uffbc" +
    "\030\uffbc\033\uffbc\034\uffbc\035\uffbc\043\uffbc\045\uffbc\047" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\057\uffbc\061\uffbc\001\002" +
    "\000\030\007\304\030\311\033\307\034\306\035\305\045" +
    "\271\052\316\053\313\054\302\057\300\061\275\001\002" +
    "\000\004\025\323\001\002\000\052\004\uffb9\007\uffb9\010" +
    "\uffb9\017\uffb9\022\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\043\uffb9\045\uffb9\047\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\057\uffb9\061\uffb9\001\002\000\056" +
    "\004\uffb4\007\uffb4\010\uffb4\017\uffb4\022\uffb4\025\uffb4\026" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\043\uffb4\045\uffb4\047\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\057\uffb4\061\uffb4\001\002\000\056\004\uffb2\007\uffb2" +
    "\010\uffb2\017\uffb2\022\uffb2\025\uffb2\026\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\043\uffb2" +
    "\045\uffb2\047\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\061" +
    "\uffb2\001\002\000\006\031\327\036\330\001\002\000\016" +
    "\033\307\034\306\035\305\045\271\052\316\057\300\001" +
    "\002\000\056\004\uffb0\007\uffb0\010\uffb0\017\uffb0\022\uffb0" +
    "\025\uffb0\026\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\043\uffb0\045\uffb0\047\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\057\uffb0\061\uffb0\001\002\000\056\004" +
    "\uffb8\007\uffb8\010\uffb8\017\uffb8\022\uffb8\025\uffb8\026\uffb8" +
    "\030\uffb8\031\uffb8\032\332\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\043\uffb8\045\uffb8\047\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\057\uffb8\061\uffb8\001\002\000\016\033\307\034\306\035" +
    "\305\045\271\052\316\057\300\001\002\000\056\004\uffb6" +
    "\007\uffb6\010\uffb6\017\uffb6\022\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\043\uffb6\045\uffb6\047\uffb6\052\uffb6\053\uffb6\054\uffb6\057" +
    "\uffb6\061\uffb6\001\002\000\036\007\uff61\010\335\026\uff61" +
    "\030\uff61\033\uff61\034\uff61\035\uff61\045\uff61\047\uff61\052" +
    "\uff61\053\uff61\054\uff61\057\uff61\061\uff61\001\002\000\050" +
    "\004\uffbd\007\uffbd\010\uffbd\017\uffbd\022\uffbd\025\uffbd\026" +
    "\uffbd\030\uffbd\033\uffbd\034\uffbd\035\uffbd\043\uffbd\045\uffbd" +
    "\047\uffbd\052\uffbd\053\uffbd\054\uffbd\057\uffbd\061\uffbd\001" +
    "\002\000\034\007\304\026\337\030\311\033\307\034\306" +
    "\035\305\045\271\047\270\052\316\053\313\054\302\057" +
    "\300\061\275\001\002\000\050\004\uffc4\007\uffc4\010\uffc4" +
    "\017\uffc4\022\uffc4\025\uffc4\026\uffc4\030\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\043\uffc4\045\uffc4\047\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\057\uffc4\061\uffc4\001\002\000\034\007\uff60\026" +
    "\uff60\030\uff60\033\uff60\034\uff60\035\uff60\045\uff60\047\uff60" +
    "\052\uff60\053\uff60\054\uff60\057\uff60\061\uff60\001\002\000" +
    "\030\007\304\030\311\033\307\034\306\035\305\045\271" +
    "\052\316\053\313\054\302\057\300\061\275\001\002\000" +
    "\050\004\uffba\007\uffba\010\uffba\017\uffba\022\uffba\025\uffba" +
    "\026\uffba\030\uffba\033\uffba\034\uffba\035\uffba\043\uffba\045" +
    "\uffba\047\uffba\052\uffba\053\uffba\054\uffba\057\uffba\061\uffba" +
    "\001\002\000\030\007\304\030\311\033\307\034\306\035" +
    "\305\045\271\052\316\053\313\054\302\057\300\061\275" +
    "\001\002\000\050\004\uffbb\007\uffbb\010\uffbb\017\uffbb\022" +
    "\uffbb\025\uffbb\026\uffbb\030\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\043\uffbb\045\uffbb\047\uffbb\052\uffbb\053\uffbb\054\uffbb\057" +
    "\uffbb\061\uffbb\001\002\000\006\027\uff63\043\351\001\002" +
    "\000\004\027\347\001\002\000\030\007\304\030\311\033" +
    "\307\034\306\035\305\045\271\052\316\053\313\054\302" +
    "\057\300\061\275\001\002\000\050\004\uffc2\007\uffc2\010" +
    "\uffc2\017\uffc2\022\uffc2\025\uffc2\026\uffc2\030\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\043\uffc2\045\uffc2\047\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\057\uffc2\061\uffc2\001\002\000\006\027\uff64" +
    "\030\311\001\002\000\004\027\uff62\001\002\000\016\004" +
    "\uffde\010\uffde\017\uffde\022\uffde\025\uffde\043\uffde\001\002" +
    "\000\004\025\355\001\002\000\012\007\uffda\021\uffda\023" +
    "\uffda\024\uffda\001\002\000\016\004\uffdb\010\uffdb\017\uffdb" +
    "\022\uffdb\025\uffdb\043\uffdb\001\002\000\006\010\360\022" +
    "\264\001\002\000\016\004\uffdd\010\uffdd\017\uffdd\022\uffdd" +
    "\025\uffdd\043\uffdd\001\002\000\024\007\062\024\004\033" +
    "\040\034\036\035\034\062\022\063\050\064\021\065\044" +
    "\001\002\000\024\007\uffa5\024\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002\000\024" +
    "\007\uffa7\024\uffa7\033\uffa7\034\uffa7\035\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\001\002\000\024\007\uffa6\024\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\062\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\001\002\000\024\007\uffa8\024\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001\002\000" +
    "\024\007\uffa9\024\uffa9\033\uffa9\034\uffa9\035\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\001\002\000\010\017\uffe8\031" +
    "\061\043\uffe8\001\002\000\126\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\017" +
    "\uffed\020\uffed\022\uffed\024\uffed\025\uffed\026\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\043\uffed\045\uffed\046\uffed\047\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\001\002\000\030\007\062\017\uff77\021\124\024\004\033" +
    "\040\034\036\035\034\062\022\063\050\064\021\065\044" +
    "\001\002\000\004\017\uff75\001\002\000\044\007\062\017" +
    "\uff74\024\004\030\043\033\040\034\036\035\034\047\026" +
    "\051\024\053\023\054\010\061\005\062\022\063\050\064" +
    "\021\065\044\066\013\001\002\000\004\017\uff72\001\002" +
    "\000\126\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\013\uffee\014\uffee\017\uffee\020\uffee\022\uffee" +
    "\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\043\uffee\045\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\057\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\067\uffee\070\uffee\001\002\000\030\007" +
    "\062\024\004\030\043\033\040\034\036\035\034\062\022" +
    "\063\050\064\021\065\044\066\013\001\002\000\054\006" +
    "\uff9b\007\uff9b\010\uff9b\017\uff9b\024\uff9b\026\uff9b\030\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\043\uff9b\047\uff9b\051\uff9b\053" +
    "\uff9b\054\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\001\002\000\004\013\uff7e\001\002\000\004\013" +
    "\u0102\001\002\000\004\042\u0103\001\002\000\004\042\u0107" +
    "\001\002\000\004\025\u0105\001\002\000\120\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\013\uff86\017\uff86\020\uff86" +
    "\022\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031\uff86\032" +
    "\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\043\uff86\045\uff86\046\uff86\047\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\057\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\001\002\000" +
    "\004\042\u0107\001\002\000\012\013\uff80\025\uff80\042\uff80" +
    "\066\uff80\001\002\000\010\013\uff5c\042\uff5c\066\u010b\001" +
    "\002\000\006\013\u0110\042\uff82\001\002\000\004\042\uff84" +
    "\001\002\000\010\013\uff7c\027\uff7c\042\uff7c\001\002\000" +
    "\010\013\uff5b\027\u010e\042\uff5b\001\002\000\006\013\uff7f" +
    "\042\uff7f\001\002\000\010\013\uff5c\042\uff5c\066\u010b\001" +
    "\002\000\006\013\uff5a\042\uff5a\001\002\000\004\064\u0111" +
    "\001\002\000\004\042\uff7b\001\002\000\004\042\uff83\001" +
    "\002\000\004\025\uff85\001\002\000\006\025\uff5f\066\u0116" +
    "\001\002\000\004\025\uff81\001\002\000\006\025\uff7d\042" +
    "\uff7d\001\002\000\006\025\uff5e\042\u0118\001\002\000\006" +
    "\025\uff5f\066\u0116\001\002\000\004\025\uff5d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\044\002\016\003\015\004\013\005\017\010" +
    "\045\020\046\054\027\055\032\056\031\057\041\060\014" +
    "\061\044\062\040\063\036\064\034\065\050\070\030\001" +
    "\001\000\004\077\u0100\001\001\000\022\056\375\060\014" +
    "\061\044\062\040\063\036\064\034\065\050\070\030\001" +
    "\001\000\002\001\001\000\010\011\223\012\224\013\226" +
    "\001\001\000\022\056\221\060\014\061\044\062\040\063" +
    "\036\064\034\065\050\070\030\001\001\000\002\001\001" +
    "\000\044\002\054\003\015\004\013\005\017\010\045\020" +
    "\046\054\220\055\032\056\031\057\041\060\014\061\044" +
    "\062\040\063\036\064\034\065\050\070\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\056\213\060\014\061\044" +
    "\062\040\063\036\064\034\065\050\070\030\001\001\000" +
    "\002\001\001\000\052\002\112\003\015\004\013\005\017" +
    "\006\110\007\113\010\045\020\046\054\027\055\032\056" +
    "\031\057\041\060\014\061\044\062\040\063\036\064\034" +
    "\065\050\070\030\103\111\001\001\000\006\060\102\107" +
    "\101\001\001\000\002\001\001\000\004\110\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\061\077\062\040\063\036\064\034\065\050\070\030" +
    "\001\001\000\002\001\001\000\006\004\076\010\045\001" +
    "\001\000\002\001\001\000\010\064\075\065\050\070\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\053\010\045\001\001\000\044\002\054\003\015" +
    "\004\013\005\017\010\045\020\046\054\027\055\032\056" +
    "\031\057\041\060\014\061\044\062\040\063\036\064\034" +
    "\065\050\070\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\015\004\013\005\057" +
    "\010\045\020\046\054\027\055\032\056\031\057\041\060" +
    "\014\061\044\062\040\063\036\064\034\065\050\070\030" +
    "\001\001\000\002\001\001\000\014\062\062\063\036\064" +
    "\034\065\050\070\030\001\001\000\030\054\065\055\032" +
    "\056\031\057\041\060\014\061\044\062\040\063\036\064" +
    "\034\065\050\070\030\001\001\000\002\001\001\000\012" +
    "\063\064\064\034\065\050\070\030\001\001\000\002\001" +
    "\001\000\004\110\067\001\001\000\002\001\001\000\026" +
    "\055\070\056\031\057\041\060\014\061\044\062\040\063" +
    "\036\064\034\065\050\070\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\056\073\060\014\061\044\062" +
    "\040\063\036\064\034\065\050\070\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\060\102\107\104\001\001\000" +
    "\002\001\001\000\022\056\106\060\014\061\044\062\040" +
    "\063\036\064\034\065\050\070\030\001\001\000\002\001" +
    "\001\000\006\017\122\106\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\112\003\015\004\013\005\017\007\115\010\045" +
    "\020\046\054\027\055\032\056\031\057\041\060\014\061" +
    "\044\062\040\063\036\064\034\065\050\070\030\001\001" +
    "\000\002\001\001\000\006\004\117\010\045\001\001\000" +
    "\002\001\001\000\052\002\112\003\015\004\013\005\017" +
    "\006\110\007\113\010\045\020\046\054\027\055\032\056" +
    "\031\057\041\060\014\061\044\062\040\063\036\064\034" +
    "\065\050\070\030\103\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\026\152\027\141\030\137\031\143" +
    "\032\151\033\154\034\135\035\134\036\133\050\132\001" +
    "\001\000\002\001\001\000\046\002\112\003\015\004\013" +
    "\005\017\007\126\010\045\020\046\054\027\055\032\056" +
    "\031\057\041\060\014\061\044\062\040\063\036\064\034" +
    "\065\050\070\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\203\111\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\201\031\143\032\151\033\154" +
    "\034\135\035\134\036\133\050\132\001\001\000\002\001" +
    "\001\000\022\030\177\031\143\032\151\033\154\034\135" +
    "\035\134\036\133\050\132\001\001\000\002\001\001\000" +
    "\026\026\175\027\141\030\137\031\143\032\151\033\154" +
    "\034\135\035\134\036\133\050\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\033\173\034\135\035\134" +
    "\036\133\050\132\001\001\000\006\065\172\070\030\001" +
    "\001\000\006\036\171\050\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\163\001\001\000\022\030" +
    "\161\031\143\032\151\033\154\034\135\035\134\036\133" +
    "\050\132\001\001\000\002\001\001\000\012\034\156\035" +
    "\134\036\133\050\132\001\001\000\002\001\001\000\010" +
    "\035\160\036\133\050\132\001\001\000\002\001\001\000" +
    "\022\030\162\031\143\032\151\033\154\034\135\035\134" +
    "\036\133\050\132\001\001\000\002\001\001\000\024\027" +
    "\165\030\137\031\143\032\151\033\154\034\135\035\134" +
    "\036\133\050\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\167\031\143\032\151\033\154\034\135" +
    "\035\134\036\133\050\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\163\001\001\000" +
    "\002\001\001\000\022\030\200\031\143\032\151\033\154" +
    "\034\135\035\134\036\133\050\132\001\001\000\002\001" +
    "\001\000\022\030\202\031\143\032\151\033\154\034\135" +
    "\035\134\036\133\050\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\206\031\143" +
    "\032\151\033\154\034\135\035\134\036\133\050\132\001" +
    "\001\000\002\001\001\000\006\032\203\111\210\001\001" +
    "\000\002\001\001\000\006\017\122\106\212\001\001\000" +
    "\002\001\001\000\022\056\214\060\014\061\044\062\040" +
    "\063\036\064\034\065\050\070\030\001\001\000\002\001" +
    "\001\000\040\003\216\004\013\010\045\020\046\054\027" +
    "\055\032\056\031\057\041\060\014\061\044\062\040\063" +
    "\036\064\034\065\050\070\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\067\001\001\000\022\056" +
    "\222\060\014\061\044\062\040\063\036\064\034\065\050" +
    "\070\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\017\231\020\230\054\027\055\032" +
    "\056\031\057\041\060\014\061\044\062\040\063\036\064" +
    "\034\065\050\070\030\105\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\233\015\237\016\234\017\240\061\236\062\040" +
    "\063\036\064\034\065\050\070\030\104\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\262\023\256\024\254\025\255\001\001\000\046" +
    "\002\246\003\015\004\013\005\017\010\045\020\046\021" +
    "\245\054\027\055\032\056\031\057\041\060\014\061\044" +
    "\062\040\063\036\064\034\065\050\070\030\001\001\000" +
    "\006\067\252\070\251\001\001\000\006\066\250\070\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\356\023\256\024\254\025\255\001\001\000" +
    "\002\001\001\000\006\024\355\025\255\001\001\000\002" +
    "\001\001\000\006\024\353\025\255\001\001\000\006\024" +
    "\352\025\255\001\001\000\030\037\300\040\314\041\313" +
    "\042\271\043\273\044\302\045\276\046\275\047\272\051" +
    "\307\052\311\001\001\000\002\001\001\000\010\023\264" +
    "\024\254\025\255\001\001\000\002\001\001\000\006\024" +
    "\266\025\255\001\001\000\002\001\001\000\006\043\344" +
    "\113\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\342\042\271" +
    "\043\273\044\302\045\276\046\275\047\272\051\307\052" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\335\001\001\000\024\041\340\042" +
    "\271\043\273\044\302\045\276\046\275\047\272\051\307" +
    "\052\311\001\001\000\002\001\001\000\030\037\333\040" +
    "\314\041\313\042\271\043\273\044\302\045\276\046\275" +
    "\047\272\051\307\052\311\001\001\000\016\044\325\045" +
    "\276\046\275\047\272\051\307\052\311\001\001\000\006" +
    "\065\324\070\030\001\001\000\010\047\323\051\307\052" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\316\042\271\043\273\044\302\045" +
    "\276\046\275\047\272\051\307\052\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\041" +
    "\317\042\271\043\273\044\302\045\276\046\275\047\272" +
    "\051\307\052\311\001\001\000\002\001\001\000\024\041" +
    "\321\042\271\043\273\044\302\045\276\046\275\047\272" +
    "\051\307\052\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\045\330\046\275\047\272\051\307\052\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\332" +
    "\047\272\051\307\052\311\001\001\000\002\001\001\000" +
    "\004\114\335\001\001\000\002\001\001\000\026\040\337" +
    "\041\313\042\271\043\273\044\302\045\276\046\275\047" +
    "\272\051\307\052\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\341\042\271\043\273\044\302\045" +
    "\276\046\275\047\272\051\307\052\311\001\001\000\002" +
    "\001\001\000\024\041\343\042\271\043\273\044\302\045" +
    "\276\046\275\047\272\051\307\052\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\041" +
    "\347\042\271\043\273\044\302\045\276\046\275\047\272" +
    "\051\307\052\311\001\001\000\002\001\001\000\006\043" +
    "\344\113\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\061\366\062\040" +
    "\063\036\064\034\065\050\070\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\233\015\237\016\234\017\240\061\236\062\040" +
    "\063\036\064\034\065\050\070\030\104\371\001\001\000" +
    "\002\001\001\000\034\020\230\054\027\055\032\056\031" +
    "\057\041\060\014\061\044\062\040\063\036\064\034\065" +
    "\050\070\030\105\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\056\376\060\014\061\044\062\040\063" +
    "\036\064\034\065\050\070\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0103\001" +
    "\001\000\006\072\u0105\075\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\074\u0112\075\u0113\001\001\000" +
    "\002\001\001\000\012\073\u0109\076\u0108\101\u010b\116\u010c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\101\u010b" +
    "\116\u010e\001\001\000\002\001\001\000\004\102\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\100\u0116\115\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\100\u0116\115\u0118" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr pRecordExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ListDNSElement ::= DNSElement _SYMB_19 ListDNSElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DNSElement p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",76, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ListDNSElement ::= DNSElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DNSElement p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",76, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ListDNSElement ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",76, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ListURLPathElement ::= URLPathElement _SYMB_30 ListURLPathElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURLPathElement",75, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ListURLPathElement ::= URLPathElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURLPathElement",75, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ListURLPathElement ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURLPathElement",75, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ListRLambdaLCtxt1 ::= ListRLambdaLCtxt1 RLambdaLCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaLCtxt1",74, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ListRLambdaLCtxt1 ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaLCtxt1",74, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ListFormalLCtxt ::= FormalLCtxt _SYMB_31 ListFormalLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalLCtxt",73, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ListFormalLCtxt ::= FormalLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalLCtxt",73, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ListFormalLCtxt ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalLCtxt",73, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ListRLambdaPCtxt1 ::= ListRLambdaPCtxt1 RLambdaPCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaPCtxt1",72, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ListRLambdaPCtxt1 ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaPCtxt1",72, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ListFormalPCtxt ::= FormalPCtxt _SYMB_31 ListFormalPCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPCtxt",71, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ListFormalPCtxt ::= FormalPCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPCtxt",71, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ListFormalPCtxt ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPCtxt",71, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ListRLambdaExpr1 ::= ListRLambdaExpr1 RLambdaExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaExpr1",70, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ListRLambdaExpr1 ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRLambdaExpr1",70, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ListFormalExpr ::= FormalExpr _SYMB_31 ListFormalExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",69, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ListFormalExpr ::= FormalExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",69, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ListFormalExpr ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",69, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ListDomainPtn ::= DomainPtn _SYMB_31 ListDomainPtn 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainPtn",68, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ListDomainPtn ::= DomainPtn 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainPtn",68, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ListDomainPtn ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainPtn",68, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ListDomainExpr ::= DomainExpr _SYMB_31 ListDomainExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainExpr",67, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ListDomainExpr ::= DomainExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainExpr",67, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ListDomainExpr ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainExpr",67, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ListDomainDeclOrCond ::= DomainDeclOrCond _SYMB_31 ListDomainDeclOrCond 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainDeclOrCond",66, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ListDomainDeclOrCond ::= DomainDeclOrCond 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainDeclOrCond",66, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ListDomainDeclOrCond ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDomainDeclOrCond",66, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ListBinding ::= Binding _SYMB_31 ListBinding 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListBinding RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.Binding p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.Binding)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListBinding p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ListBinding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBinding",65, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ListBinding ::= Binding 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListBinding RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.Binding p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.Binding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListBinding(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBinding",65, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ListBinding ::= 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ListBinding RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListBinding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBinding",65, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Port ::= _INTEGER_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Port RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomPort(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Port",64, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DNSElement ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DNSElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomDNSElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DNSElement",63, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // URLPathElement ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomPathElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLPathElement",62, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // URLScheme ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLScheme RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomScheme(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLScheme",61, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NetLocation ::= ListDNSElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.NetLocation RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DNSAddr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NetLocation",60, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // URLRoot ::= _SYMB_30 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLRoot RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLOrigin(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLRoot",59, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // URLRelativePath ::= URLRoot ListURLPathElement 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLRelativePath RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLRoot p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URLRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SlashPath(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLRelativePath",58, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // URLRsrcLocation ::= NetLocation 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLocation RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.NetLocation p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLoc(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLRsrcLocation",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // URLRsrcLocation ::= NetLocation _SYMB_7 Port 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLocation RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.NetLocation p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.Port p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.Port)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcPortLoc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLRsrcLocation",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // URLLocation ::= URLRoot URLRsrcLocation 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLLocation RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLRoot p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URLRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLocation p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLNetLocation(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLLocation",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // URLPath ::= _SYMB_30 URLLocation URLRelativePath 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URLPath RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLLocation p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.URLLocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.URLRelativePath p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.URLRelativePath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.LocatedtedPath(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URLPath",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // URL ::= _SYMB_16 URLScheme _SYMB_7 URLPath _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.URL RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URLScheme p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.URLScheme)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.URLPath p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.URLPath)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BasicURL(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URL",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WireURL ::= URL 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.WireURL RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URL p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordWireURL(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WireURL",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // StoreURL ::= URL 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.StoreURL RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URL p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordStoreURL(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StoreURL",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ValueLiteral ::= URL 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.URL p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.URL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueURLLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ValueLiteral ::= _CHAR_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueCharLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ValueLiteral ::= _STRING_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueStringLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ValueLiteral ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueDoubleLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ValueLiteral ::= _INTEGER_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueIntLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ValueLiteral ::= _SYMB_3 RLambdaExpr _SYMB_4 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLamLit(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ValueLiteral ::= _SYMB_24 RecordExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueRecLit(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLiteral",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ValueExpr3 ::= _SYMB_25 ValueExpr _SYMB_26 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr3",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ValueExpr3 ::= ValueLiteral 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitExpr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr3",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ValueExpr2 ::= ValueExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr2",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ValueExpr2 ::= _SYMB_23 ValueExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegExpr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr2",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ValueExpr1 ::= ValueExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr1",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ValueExpr1 ::= ValueExpr1 _SYMB_22 ValueExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultExpr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr1",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ValueExpr ::= ValueExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ValueExpr ::= ValueExpr _SYMB_21 ValueExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddExpr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FormalExpr ::= _IDENT_ 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FormalExpr ::= _SYMB_20 _SYMB_16 RLambdaExpr2 _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ContinueExpr ::= _SYMB_40 RLambdaExpr2 RLambdaExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubCont(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueExpr",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContinueExpr ::= _SYMB_45 RLambdaExpr2 RLambdaExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Subcontinuation(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueExpr",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ContinueExpr ::= _SYMB_39 RLambdaExpr2 RLambdaExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPrompt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueExpr",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ContinueExpr ::= _SYMB_37 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Prompt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueExpr",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RLambdaExpr2 ::= ValueExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr2",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RLambdaExpr2 ::= FormalExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr2",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RLambdaExpr1 ::= RLambdaExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr1",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RLambdaExpr1 ::= ContinueExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Continuation(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr1",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RLambdaExpr1 ::= _SYMB_35 ListFormalExpr _SYMB_19 RLambdaExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Abstraction(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr1",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RLambdaExpr ::= RLambdaExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RLambdaExpr ::= RLambdaExpr ListRLambdaExpr1 _SYMB_18 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Application(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaExpr",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Comparison ::= _SYMB_29 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Comparison RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GEq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Comparison ::= _SYMB_28 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Comparison RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.LEq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Comparison ::= _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Comparison RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.More(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Comparison ::= _SYMB_16 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Comparison RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Less(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Comparison ::= _SYMB_27 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Comparison RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Equality(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LogicalGround ::= _SYMB_38 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Nullity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalGround",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LogicalGround ::= _SYMB_33 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Absurdity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalGround",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LogicalGround ::= _SYMB_43 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Verity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalGround",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ValueLCtxtHole ::= LogicalGround 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxtHole RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValLPlaceHolder(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxtHole",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ValuePCtxtHole ::= Wild 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxtHole RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValWildCard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxtHole",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ValuePCtxtHole ::= UIdent 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxtHole RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValPPlaceHolder(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxtHole",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ValueLCtxt3 ::= _SYMB_25 ValueLCtxt _SYMB_26 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt3",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ValueLCtxt3 ::= ValueLCtxtHole 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxtHole p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxtHole)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueEmptyLCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt3",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ValueLCtxt3 ::= _SYMB_24 ValueLiteral 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitLCtxt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt3",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ValueLCtxt2 ::= ValueLCtxt3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt2",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ValueLCtxt2 ::= _SYMB_23 ValueLCtxt3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegLCtxt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt2",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ValueLCtxt1 ::= ValueLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt1",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ValueLCtxt1 ::= ValueLCtxt1 _SYMB_22 ValueLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultLCtxt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt1",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ValueLCtxt ::= ValueLCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ValueLCtxt ::= ValueLCtxt _SYMB_21 ValueLCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddLCtxt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueLCtxt",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FormalLCtxt ::= _SYMB_20 _SYMB_16 RLambdaLCtxt2 _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.TranscriptLCtxt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalLCtxt",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ContinueLCtxt ::= _SYMB_40 RLambdaLCtxt2 RLambdaLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubContLCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueLCtxt",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ContinueLCtxt ::= _SYMB_45 RLambdaLCtxt2 RLambdaLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SubconLCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueLCtxt",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ContinueLCtxt ::= _SYMB_39 RLambdaLCtxt2 RLambdaLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPromptLCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueLCtxt",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RLambdaLCtxt2 ::= _SYMB_3 RLambdaLCtxt _SYMB_4 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt2",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RLambdaLCtxt2 ::= ValueLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GroundLCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt2",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RLambdaLCtxt2 ::= FormalLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.MentionLCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt2",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RLambdaLCtxt2 ::= ContinueLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.KLCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt2",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RLambdaLCtxt1 ::= RLambdaLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RLambdaLCtxt1 ::= _SYMB_35 ListFormalLCtxt _SYMB_19 RLambdaLCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AbstractionLCtxt(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RLambdaLCtxt ::= RLambdaLCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RLambdaLCtxt ::= RLambdaLCtxt ListRLambdaLCtxt1 _SYMB_18 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ApplicationLCtxt(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaLCtxt",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ValuePCtxt3 ::= _SYMB_25 ValuePCtxt _SYMB_26 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ValuePCtxt3 ::= ValuePCtxtHole 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxtHole p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxtHole)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueEmptyPCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ValuePCtxt3 ::= _SYMB_24 ValueLiteral 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitPCtxt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ValuePCtxt2 ::= ValuePCtxt3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ValuePCtxt2 ::= _SYMB_23 ValuePCtxt3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegPCtxt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ValuePCtxt1 ::= ValuePCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt1",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ValuePCtxt1 ::= ValuePCtxt1 _SYMB_22 ValuePCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultPCtxt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt1",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ValuePCtxt ::= ValuePCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ValuePCtxt ::= ValuePCtxt _SYMB_21 ValuePCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddPCtxt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValuePCtxt",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalPCtxt ::= _SYMB_20 _SYMB_16 RLambdaPCtxt2 _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.TranscriptPCtxt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalPCtxt",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ContinuePCtxt ::= _SYMB_40 RLambdaPCtxt2 RLambdaPCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubContPCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinuePCtxt",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ContinuePCtxt ::= _SYMB_45 RLambdaPCtxt2 RLambdaPCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SubcontPCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinuePCtxt",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ContinuePCtxt ::= _SYMB_39 RLambdaPCtxt2 RLambdaPCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPromptPCtxt(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinuePCtxt",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RLambdaPCtxt2 ::= _SYMB_3 RLambdaPCtxt _SYMB_4 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt2",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RLambdaPCtxt2 ::= FormalPCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.MentionPCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt2",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RLambdaPCtxt2 ::= ValuePCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GroundPCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt2",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RLambdaPCtxt2 ::= ContinuePCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.KPCtxt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt2",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RLambdaPCtxt1 ::= RLambdaPCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RLambdaPCtxt1 ::= _SYMB_35 ListFormalPCtxt _SYMB_19 RLambdaPCtxt2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AbstractionPCtxt(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RLambdaPCtxt ::= RLambdaPCtxt1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RLambdaPCtxt ::= RLambdaPCtxt ListRLambdaPCtxt1 _SYMB_18 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ApplicationPCtxt(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RLambdaPCtxt",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Modality ::= _SYMB_16 DomainCondition2 _SYMB_17 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Modality RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ProbePossibility(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modality",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DomainCondition2 ::= Modality DomainCondition2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.Modality p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.Modality)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BehavioralDomainCondition(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DomainCondition2 ::= _SYMB_13 RLambdaLCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.StructuralDomainCondition(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DomainCondition2 ::= _SYMB_3 DomainCondition _SYMB_4 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DomainCondition2 ::= _SYMB_15 DomainCondition2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.NegatedDomainCondition(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DomainCondition1 ::= DomainCondition2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition1",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DomainCondition1 ::= DomainCondition1 _SYMB_0 DomainCondition2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ConjunctDomainCondition(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition1",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DomainCondition ::= DomainCondition1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DomainCondition ::= DomainCondition _SYMB_14 DomainCondition1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DisjunctDomainCondition(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCondition",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RecordSource ::= _SYMB_44 WireURL 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordSource RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.WireURL p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.WireURL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.WireSource(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordSource",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RecordSource ::= _SYMB_42 StoreURL 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordSource RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.StoreURL p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.StoreURL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PersistentSource(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordSource",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RecordSource ::= RecordExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordSource RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.OnBoardSource(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordSource",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DomainExpr ::= RLambdaExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainRLambdaExpr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainExpr",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DomainPtn ::= _SYMB_13 RLambdaPCtxt 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainPtnExpr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainPtn",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DomainCond ::= ValueExpr Comparison ValueExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.Comparison p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.Comparison)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainCompExpr(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCond",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DomainCond ::= DomainPtn _SYMB_34 DomainCondition 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainSatExpr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainCond",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DomainGen ::= DomainPtn _SYMB_12 RecordSource 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainGen RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordSource p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordSource)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainGenExpr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainGen",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DomainDeclOrCond ::= DomainGen 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainGen p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DeclIn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainDeclOrCond",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DomainDeclOrCond ::= DomainCond 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainCond p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ConditionIn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DomainDeclOrCond",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IntensionBodyExpr ::= _SYMB_10 DomainPtn _SYMB_1 ListDomainDeclOrCond _SYMB_11 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.IntensionBodyExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.IntensionBody(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntensionBodyExpr",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExtensionBodyExpr ::= _SYMB_10 ListDomainExpr _SYMB_11 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBodyExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBody(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtensionBodyExpr",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CollectionExpr ::= IntensionBodyExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.CollectionExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.IntensionBodyExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.IntensionBodyExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Intension(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpr",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CollectionExpr ::= ExtensionBodyExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.CollectionExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBodyExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBodyExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Extension(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpr",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RecordVariable ::= _SYMB_9 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordVariable RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordVariable",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RecordVariable ::= UIdent 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordVariable RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordVariable",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RecordPtn ::= RecordExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordPtn",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RecordPtn ::= _SYMB_6 ListDomainPtn _SYMB_7 RecordPtn _SYMB_8 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordDestructor(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordPtn",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Binding ::= RecordPtn _SYMB_5 RecordPtn 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.Binding RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BindingExpr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binding",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RecordExpr1 ::= RecordExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr1",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RecordExpr3 ::= _SYMB_3 RecordExpr _SYMB_4 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RecordExpr3 ::= _SYMB_32 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Emptied(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RecordExpr3 ::= _SYMB_41 CollectionExpr 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.CollectionExpr p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.CollectionExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Collected(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RecordExpr3 ::= RecordVariable 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordVariable p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Referenced(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RecordExpr3 ::= _SYMB_36 ListBinding _SYMB_34 RecordExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.ListBinding p_2 = (com.biosimilarity.lift.model.seleKt.Absyn.ListBinding)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_4 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Contexted(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RecordExpr2 ::= RecordExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr2",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RecordExpr2 ::= DomainExpr _SYMB_2 RecordExpr3 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Consed(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr2",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RecordExpr ::= RecordExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RecordExpr ::= RecordExpr1 _SYMB_1 RecordExpr2 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Isolated(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RecordExpr ::= RecordExpr _SYMB_0 RecordExpr1 
            {
              com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_1 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr p_3 = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Joined(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RecordExpr EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr start_val = (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

