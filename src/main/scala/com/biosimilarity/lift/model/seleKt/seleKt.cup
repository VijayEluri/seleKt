// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.lift.model.seleKt;

parser code {:
  public com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr pRecordExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RecordExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RecordExpr2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RecordExpr3;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordExpr RecordExpr1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.Binding Binding;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordPtn RecordPtn;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordVariable RecordVariable;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.CollectionExpr CollectionExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBodyExpr ExtensionBodyExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.IntensionBodyExpr IntensionBodyExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainDeclOrCond DomainDeclOrCond;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainGen DomainGen;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainCond DomainCond;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainPtn DomainPtn;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainExpr DomainExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RecordSource RecordSource;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition DomainCondition;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition DomainCondition1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DomainCondition DomainCondition2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.Modality Modality;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RLambdaPCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RLambdaPCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaPCtxt RLambdaPCtxt2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ContinuePCtxt ContinuePCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.FormalPCtxt FormalPCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt ValuePCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt ValuePCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt ValuePCtxt2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxt ValuePCtxt3;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RLambdaLCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RLambdaLCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaLCtxt RLambdaLCtxt2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ContinueLCtxt ContinueLCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.FormalLCtxt FormalLCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt ValueLCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt ValueLCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt ValueLCtxt2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxt ValueLCtxt3;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValuePCtxtHole ValuePCtxtHole;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLCtxtHole ValueLCtxtHole;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.LogicalGround LogicalGround;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.Comparison Comparison;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RLambdaExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RLambdaExpr1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.RLambdaExpr RLambdaExpr2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ContinueExpr ContinueExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.FormalExpr FormalExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr ValueExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr ValueExpr1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr ValueExpr2;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueExpr ValueExpr3;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ValueLiteral ValueLiteral;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.StoreURL StoreURL;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.WireURL WireURL;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URL URL;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLPath URLPath;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLLocation URLLocation;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLocation URLRsrcLocation;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLRelativePath URLRelativePath;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLRoot URLRoot;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.NetLocation NetLocation;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLScheme URLScheme;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.URLPathElement URLPathElement;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.DNSElement DNSElement;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.Port Port;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListBinding ListBinding;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond ListDomainDeclOrCond;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr ListDomainExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn ListDomainPtn;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr ListFormalExpr;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr ListRLambdaExpr1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt ListFormalPCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt ListRLambdaPCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt ListFormalLCtxt;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt ListRLambdaLCtxt1;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement ListURLPathElement;
nonterminal com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement ListDNSElement;

terminal _SYMB_0;    //   &
terminal _SYMB_1;    //   |
terminal _SYMB_2;    //   ::
terminal _SYMB_3;    //   (
terminal _SYMB_4;    //   )
terminal _SYMB_5;    //   =
terminal _SYMB_6;    //   {:
terminal _SYMB_7;    //   :
terminal _SYMB_8;    //   :}
terminal _SYMB_9;    //   _
terminal _SYMB_10;    //   {
terminal _SYMB_11;    //   }
terminal _SYMB_12;    //   <-
terminal _SYMB_13;    //   ?
terminal _SYMB_14;    //   ||
terminal _SYMB_15;    //   ~
terminal _SYMB_16;    //   <
terminal _SYMB_17;    //   >
terminal _SYMB_18;    //   ;
terminal _SYMB_19;    //   .
terminal _SYMB_20;    //   @
terminal _SYMB_21;    //   +
terminal _SYMB_22;    //   *
terminal _SYMB_23;    //   -
terminal _SYMB_24;    //   !
terminal _SYMB_25;    //   [
terminal _SYMB_26;    //   ]
terminal _SYMB_27;    //   ==
terminal _SYMB_28;    //   <=
terminal _SYMB_29;    //   >=
terminal _SYMB_30;    //   /
terminal _SYMB_31;    //   ,
terminal _SYMB_32;    //   Nil
terminal _SYMB_33;    //   false
terminal _SYMB_34;    //   in
terminal _SYMB_35;    //   lambda
terminal _SYMB_36;    //   let
terminal _SYMB_37;    //   newPrompt
terminal _SYMB_38;    //   null
terminal _SYMB_39;    //   pushPrompt
terminal _SYMB_40;    //   pushSubCont
terminal _SYMB_41;    //   record
terminal _SYMB_42;    //   store
terminal _SYMB_43;    //   true
terminal _SYMB_44;    //   wire
terminal _SYMB_45;    //   withSubCont

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;

terminal String UIdent;
terminal String Wild;


start with RecordExpr;


RecordExpr ::= RecordExpr:p_1 _SYMB_0 RecordExpr1:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Joined(p_1,p_3); :} 
  | RecordExpr1:p_1 _SYMB_1 RecordExpr2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Isolated(p_1,p_3); :}
  | RecordExpr1:p_1  {: RESULT = p_1; :}
;
RecordExpr2 ::= DomainExpr:p_1 _SYMB_2 RecordExpr3:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Consed(p_1,p_3); :} 
  | RecordExpr3:p_1  {: RESULT = p_1; :}
;
RecordExpr3 ::= _SYMB_36 ListBinding:p_2 _SYMB_34 RecordExpr3:p_4  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Contexted(p_2,p_4); :} 
  | RecordVariable:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Referenced(p_1); :}
  | _SYMB_41 CollectionExpr:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Collected(p_2); :}
  | _SYMB_32  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Emptied(); :}
  | _SYMB_3 RecordExpr:p_2 _SYMB_4  {: RESULT = p_2; :}
;
RecordExpr1 ::= RecordExpr2:p_1  {: RESULT = p_1; :} 
;
Binding ::= RecordPtn:p_1 _SYMB_5 RecordPtn:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BindingExpr(p_1,p_3); :} 
;
RecordPtn ::= _SYMB_6 ListDomainPtn:p_2 _SYMB_7 RecordPtn:p_4 _SYMB_8  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordDestructor(p_2,p_4); :} 
  | RecordExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordLiteral(p_1); :}
;
RecordVariable ::= UIdent:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordIdent(p_1); :} 
  | _SYMB_9  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordWild(); :}
;
CollectionExpr ::= ExtensionBodyExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Extension(p_1); :} 
  | IntensionBodyExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Intension(p_1); :}
;
ExtensionBodyExpr ::= _SYMB_10 ListDomainExpr:p_2 _SYMB_11  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ExtensionBody(p_2); :} 
;
IntensionBodyExpr ::= _SYMB_10 DomainPtn:p_2 _SYMB_1 ListDomainDeclOrCond:p_4 _SYMB_11  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.IntensionBody(p_2,p_4); :} 
;
DomainDeclOrCond ::= DomainCond:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ConditionIn(p_1); :} 
  | DomainGen:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DeclIn(p_1); :}
;
DomainGen ::= DomainPtn:p_1 _SYMB_12 RecordSource:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainGenExpr(p_1,p_3); :} 
;
DomainCond ::= DomainPtn:p_1 _SYMB_34 DomainCondition:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainSatExpr(p_1,p_3); :} 
  | ValueExpr:p_1 Comparison:p_2 ValueExpr:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainCompExpr(p_1,p_2,p_3); :}
;
DomainPtn ::= _SYMB_13 RLambdaPCtxt:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainPtnExpr(p_2); :} 
;
DomainExpr ::= RLambdaExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DomainRLambdaExpr(p_1); :} 
;
RecordSource ::= RecordExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.OnBoardSource(p_1); :} 
  | _SYMB_42 StoreURL:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PersistentSource(p_2); :}
  | _SYMB_44 WireURL:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.WireSource(p_2); :}
;
DomainCondition ::= DomainCondition:p_1 _SYMB_14 DomainCondition1:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DisjunctDomainCondition(p_1,p_3); :} 
  | DomainCondition1:p_1  {: RESULT = p_1; :}
;
DomainCondition1 ::= DomainCondition1:p_1 _SYMB_0 DomainCondition2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ConjunctDomainCondition(p_1,p_3); :} 
  | DomainCondition2:p_1  {: RESULT = p_1; :}
;
DomainCondition2 ::= _SYMB_15 DomainCondition2:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.NegatedDomainCondition(p_2); :} 
  | _SYMB_3 DomainCondition:p_2 _SYMB_4  {: RESULT = p_2; :}
  | _SYMB_13 RLambdaLCtxt:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.StructuralDomainCondition(p_2); :}
  | Modality:p_1 DomainCondition2:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BehavioralDomainCondition(p_1,p_2); :}
;
Modality ::= _SYMB_16 DomainCondition2:p_2 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ProbePossibility(p_2); :} 
;
RLambdaPCtxt ::= RLambdaPCtxt:p_1 ListRLambdaPCtxt1:p_2 _SYMB_18  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ApplicationPCtxt(p_1,p_2); :} 
  | RLambdaPCtxt1:p_1  {: RESULT = p_1; :}
;
RLambdaPCtxt1 ::= _SYMB_35 ListFormalPCtxt:p_2 _SYMB_19 RLambdaPCtxt2:p_4  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AbstractionPCtxt(p_2,p_4); :} 
  | RLambdaPCtxt2:p_1  {: RESULT = p_1; :}
;
RLambdaPCtxt2 ::= ContinuePCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.KPCtxt(p_1); :} 
  | ValuePCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GroundPCtxt(p_1); :}
  | FormalPCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.MentionPCtxt(p_1); :}
  | _SYMB_3 RLambdaPCtxt:p_2 _SYMB_4  {: RESULT = p_2; :}
;
ContinuePCtxt ::= _SYMB_39 RLambdaPCtxt2:p_2 RLambdaPCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPromptPCtxt(p_2,p_3); :} 
  | _SYMB_45 RLambdaPCtxt2:p_2 RLambdaPCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SubcontPCtxt(p_2,p_3); :}
  | _SYMB_40 RLambdaPCtxt2:p_2 RLambdaPCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubContPCtxt(p_2,p_3); :}
;
FormalPCtxt ::= _SYMB_20 _SYMB_16 RLambdaPCtxt2:p_3 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.TranscriptPCtxt(p_3); :} 
;
ValuePCtxt ::= ValuePCtxt:p_1 _SYMB_21 ValuePCtxt1:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddPCtxt(p_1,p_3); :} 
  | ValuePCtxt1:p_1  {: RESULT = p_1; :}
;
ValuePCtxt1 ::= ValuePCtxt1:p_1 _SYMB_22 ValuePCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultPCtxt(p_1,p_3); :} 
  | ValuePCtxt2:p_1  {: RESULT = p_1; :}
;
ValuePCtxt2 ::= _SYMB_23 ValuePCtxt3:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegPCtxt(p_2); :} 
  | ValuePCtxt3:p_1  {: RESULT = p_1; :}
;
ValuePCtxt3 ::= _SYMB_24 ValueLiteral:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitPCtxt(p_2); :} 
  | ValuePCtxtHole:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueEmptyPCtxt(p_1); :}
  | _SYMB_25 ValuePCtxt:p_2 _SYMB_26  {: RESULT = p_2; :}
;
RLambdaLCtxt ::= RLambdaLCtxt:p_1 ListRLambdaLCtxt1:p_2 _SYMB_18  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ApplicationLCtxt(p_1,p_2); :} 
  | RLambdaLCtxt1:p_1  {: RESULT = p_1; :}
;
RLambdaLCtxt1 ::= _SYMB_35 ListFormalLCtxt:p_2 _SYMB_19 RLambdaLCtxt2:p_4  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AbstractionLCtxt(p_2,p_4); :} 
  | RLambdaLCtxt2:p_1  {: RESULT = p_1; :}
;
RLambdaLCtxt2 ::= ContinueLCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.KLCtxt(p_1); :} 
  | FormalLCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.MentionLCtxt(p_1); :}
  | ValueLCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GroundLCtxt(p_1); :}
  | _SYMB_3 RLambdaLCtxt:p_2 _SYMB_4  {: RESULT = p_2; :}
;
ContinueLCtxt ::= _SYMB_39 RLambdaLCtxt2:p_2 RLambdaLCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPromptLCtxt(p_2,p_3); :} 
  | _SYMB_45 RLambdaLCtxt2:p_2 RLambdaLCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SubconLCtxt(p_2,p_3); :}
  | _SYMB_40 RLambdaLCtxt2:p_2 RLambdaLCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubContLCtxt(p_2,p_3); :}
;
FormalLCtxt ::= _SYMB_20 _SYMB_16 RLambdaLCtxt2:p_3 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.TranscriptLCtxt(p_3); :} 
;
ValueLCtxt ::= ValueLCtxt:p_1 _SYMB_21 ValueLCtxt1:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddLCtxt(p_1,p_3); :} 
  | ValueLCtxt1:p_1  {: RESULT = p_1; :}
;
ValueLCtxt1 ::= ValueLCtxt1:p_1 _SYMB_22 ValueLCtxt2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultLCtxt(p_1,p_3); :} 
  | ValueLCtxt2:p_1  {: RESULT = p_1; :}
;
ValueLCtxt2 ::= _SYMB_23 ValueLCtxt3:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegLCtxt(p_2); :} 
  | ValueLCtxt3:p_1  {: RESULT = p_1; :}
;
ValueLCtxt3 ::= _SYMB_24 ValueLiteral:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitLCtxt(p_2); :} 
  | ValueLCtxtHole:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueEmptyLCtxt(p_1); :}
  | _SYMB_25 ValueLCtxt:p_2 _SYMB_26  {: RESULT = p_2; :}
;
ValuePCtxtHole ::= UIdent:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValPPlaceHolder(p_1); :} 
  | Wild:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValWildCard(p_1); :}
;
ValueLCtxtHole ::= LogicalGround:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValLPlaceHolder(p_1); :} 
;
LogicalGround ::= _SYMB_43  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Verity(); :} 
  | _SYMB_33  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Absurdity(); :}
  | _SYMB_38  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Nullity(); :}
;
Comparison ::= _SYMB_27  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Equality(); :} 
  | _SYMB_16  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Less(); :}
  | _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.More(); :}
  | _SYMB_28  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.LEq(); :}
  | _SYMB_29  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.GEq(); :}
;
RLambdaExpr ::= RLambdaExpr:p_1 ListRLambdaExpr1:p_2 _SYMB_18  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Application(p_1,p_2); :} 
  | RLambdaExpr1:p_1  {: RESULT = p_1; :}
;
RLambdaExpr1 ::= _SYMB_35 ListFormalExpr:p_2 _SYMB_19 RLambdaExpr2:p_4  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Abstraction(p_2,p_4); :} 
  | ContinueExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Continuation(p_1); :}
  | RLambdaExpr2:p_1  {: RESULT = p_1; :}
;
RLambdaExpr2 ::= FormalExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Mention(p_1); :} 
  | ValueExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Value(p_1); :}
;
ContinueExpr ::= _SYMB_37  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Prompt(); :} 
  | _SYMB_39 RLambdaExpr2:p_2 RLambdaExpr2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushPrompt(p_2,p_3); :}
  | _SYMB_45 RLambdaExpr2:p_2 RLambdaExpr2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Subcontinuation(p_2,p_3); :}
  | _SYMB_40 RLambdaExpr2:p_2 RLambdaExpr2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.PushSubCont(p_2,p_3); :}
;
FormalExpr ::= _SYMB_20 _SYMB_16 RLambdaExpr2:p_3 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.Transcription(p_3); :} 
  | _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomLiteral(p_1); :}
;
ValueExpr ::= ValueExpr:p_1 _SYMB_21 ValueExpr1:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueAddExpr(p_1,p_3); :} 
  | ValueExpr1:p_1  {: RESULT = p_1; :}
;
ValueExpr1 ::= ValueExpr1:p_1 _SYMB_22 ValueExpr2:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueMultExpr(p_1,p_3); :} 
  | ValueExpr2:p_1  {: RESULT = p_1; :}
;
ValueExpr2 ::= _SYMB_23 ValueExpr3:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueNegExpr(p_2); :} 
  | ValueExpr3:p_1  {: RESULT = p_1; :}
;
ValueExpr3 ::= ValueLiteral:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLitExpr(p_1); :} 
  | _SYMB_25 ValueExpr:p_2 _SYMB_26  {: RESULT = p_2; :}
;
ValueLiteral ::= _SYMB_24 RecordExpr3:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueRecLit(p_2); :} 
  | _SYMB_3 RLambdaExpr:p_2 _SYMB_4  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueLamLit(p_2); :}
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueIntLit(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueDoubleLit(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueStringLit(p_1); :}
  | _CHAR_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueCharLit(p_1); :}
  | URL:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ValueURLLit(p_1); :}
;
StoreURL ::= URL:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordStoreURL(p_1); :} 
;
WireURL ::= URL:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.RecordWireURL(p_1); :} 
;
URL ::= _SYMB_16 URLScheme:p_2 _SYMB_7 URLPath:p_4 _SYMB_17  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.BasicURL(p_2,p_4); :} 
;
URLPath ::= _SYMB_30 URLLocation:p_2 URLRelativePath:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.LocatedtedPath(p_2,p_3); :} 
;
URLLocation ::= URLRoot:p_1 URLRsrcLocation:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLNetLocation(p_1,p_2); :} 
;
URLRsrcLocation ::= NetLocation:p_1 _SYMB_7 Port:p_3  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcPortLoc(p_1,p_3); :} 
  | NetLocation:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLRsrcLoc(p_1); :}
;
URLRelativePath ::= URLRoot:p_1 ListURLPathElement:p_2  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.SlashPath(p_1,p_2); :} 
;
URLRoot ::= _SYMB_30  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.URLOrigin(); :} 
;
NetLocation ::= ListDNSElement:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.DNSAddr(p_1); :} 
;
URLScheme ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomScheme(p_1); :} 
;
URLPathElement ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomPathElement(p_1); :} 
;
DNSElement ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomDNSElement(p_1); :} 
;
Port ::= _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.AtomPort(p_1); :} 
;
ListBinding ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListBinding(); :} 
  | Binding:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListBinding(); RESULT.addLast(p_1); :}
  | Binding:p_1 _SYMB_31 ListBinding:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDomainDeclOrCond ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond(); :} 
  | DomainDeclOrCond:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainDeclOrCond(); RESULT.addLast(p_1); :}
  | DomainDeclOrCond:p_1 _SYMB_31 ListDomainDeclOrCond:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDomainExpr ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr(); :} 
  | DomainExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainExpr(); RESULT.addLast(p_1); :}
  | DomainExpr:p_1 _SYMB_31 ListDomainExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDomainPtn ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn(); :} 
  | DomainPtn:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDomainPtn(); RESULT.addLast(p_1); :}
  | DomainPtn:p_1 _SYMB_31 ListDomainPtn:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListFormalExpr ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr(); :} 
  | FormalExpr:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalExpr(); RESULT.addLast(p_1); :}
  | FormalExpr:p_1 _SYMB_31 ListFormalExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListRLambdaExpr1 ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaExpr(); :} 
  | ListRLambdaExpr1:p_1 RLambdaExpr1:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListFormalPCtxt ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt(); :} 
  | FormalPCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalPCtxt(); RESULT.addLast(p_1); :}
  | FormalPCtxt:p_1 _SYMB_31 ListFormalPCtxt:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListRLambdaPCtxt1 ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaPCtxt(); :} 
  | ListRLambdaPCtxt1:p_1 RLambdaPCtxt1:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListFormalLCtxt ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt(); :} 
  | FormalLCtxt:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListFormalLCtxt(); RESULT.addLast(p_1); :}
  | FormalLCtxt:p_1 _SYMB_31 ListFormalLCtxt:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListRLambdaLCtxt1 ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListRLambdaLCtxt(); :} 
  | ListRLambdaLCtxt1:p_1 RLambdaLCtxt1:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListURLPathElement ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement(); :} 
  | URLPathElement:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListURLPathElement(); RESULT.addLast(p_1); :}
  | URLPathElement:p_1 _SYMB_30 ListURLPathElement:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDNSElement ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement(); :} 
  | DNSElement:p_1  {: RESULT = new com.biosimilarity.lift.model.seleKt.Absyn.ListDNSElement(); RESULT.addLast(p_1); :}
  | DNSElement:p_1 _SYMB_19 ListDNSElement:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

