{-# OPTIONS -fno-warn-incomplete-patterns #-}
module PrintseleKt where

-- pretty-printer generated by the BNF converter

import AbsseleKt
import Char

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString i)


instance Print UIdent where
  prt _ (UIdent i) = doc (showString i)


instance Print Wild where
  prt _ (Wild i) = doc (showString i)



instance Print RecordExpr where
  prt i e = case e of
   Joined recordexpr0 recordexpr -> prPrec i 0 (concatD [prt 0 recordexpr0 , doc (showString "&") , prt 1 recordexpr])
   Isolated recordexpr0 recordexpr -> prPrec i 0 (concatD [prt 1 recordexpr0 , doc (showString "|") , prt 2 recordexpr])
   Consed domainexpr recordexpr -> prPrec i 2 (concatD [prt 0 domainexpr , doc (showString "::") , prt 3 recordexpr])
   Contexted bindings recordexpr -> prPrec i 3 (concatD [doc (showString "let") , prt 0 bindings , doc (showString "in") , prt 3 recordexpr])
   Referenced recordvariable -> prPrec i 3 (concatD [prt 0 recordvariable])
   Collected collectionexpr -> prPrec i 3 (concatD [doc (showString "record") , prt 0 collectionexpr])
   Emptied  -> prPrec i 3 (concatD [doc (showString "Nil")])


instance Print Binding where
  prt i e = case e of
   BindingExpr recordptn0 recordptn -> prPrec i 0 (concatD [prt 0 recordptn0 , doc (showString "=") , prt 0 recordptn])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print RecordPtn where
  prt i e = case e of
   RecordDestructor domainptns recordptn -> prPrec i 0 (concatD [doc (showString "{:") , prt 0 domainptns , doc (showString ":") , prt 0 recordptn , doc (showString ":}")])
   RecordLiteral recordexpr -> prPrec i 0 (concatD [prt 0 recordexpr])


instance Print RecordVariable where
  prt i e = case e of
   RecordIdent uident -> prPrec i 0 (concatD [prt 0 uident])
   RecordWild  -> prPrec i 0 (concatD [doc (showString "_")])


instance Print CollectionExpr where
  prt i e = case e of
   Extension extensionbodyexpr -> prPrec i 0 (concatD [prt 0 extensionbodyexpr])
   Intension intensionbodyexpr -> prPrec i 0 (concatD [prt 0 intensionbodyexpr])


instance Print ExtensionBodyExpr where
  prt i e = case e of
   ExtensionBody domainexprs -> prPrec i 0 (concatD [doc (showString "{") , prt 0 domainexprs , doc (showString "}")])


instance Print IntensionBodyExpr where
  prt i e = case e of
   IntensionBody domainptn domaindeclorconds -> prPrec i 0 (concatD [doc (showString "{") , prt 0 domainptn , doc (showString "|") , prt 0 domaindeclorconds , doc (showString "}")])


instance Print DomainDeclOrCond where
  prt i e = case e of
   ConditionIn domaincond -> prPrec i 0 (concatD [prt 0 domaincond])
   DeclIn domaingen -> prPrec i 0 (concatD [prt 0 domaingen])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print DomainGen where
  prt i e = case e of
   DomainGenExpr domainptn recordsource -> prPrec i 0 (concatD [prt 0 domainptn , doc (showString "<-") , prt 0 recordsource])


instance Print DomainCond where
  prt i e = case e of
   DomainSatExpr domainptn domaincondition -> prPrec i 0 (concatD [prt 0 domainptn , doc (showString "in") , prt 0 domaincondition])
   DomainCompExpr valueexpr0 comparison valueexpr -> prPrec i 0 (concatD [prt 0 valueexpr0 , prt 0 comparison , prt 0 valueexpr])


instance Print DomainPtn where
  prt i e = case e of
   DomainPtnExpr rlambdapctxt -> prPrec i 0 (concatD [doc (showString "?") , prt 0 rlambdapctxt])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print DomainExpr where
  prt i e = case e of
   DomainRLambdaExpr rlambdaexpr -> prPrec i 0 (concatD [prt 0 rlambdaexpr])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print RecordSource where
  prt i e = case e of
   OnBoardSource recordexpr -> prPrec i 0 (concatD [prt 0 recordexpr])
   PersistentSource storeurl -> prPrec i 0 (concatD [doc (showString "store") , prt 0 storeurl])
   WireSource wireurl -> prPrec i 0 (concatD [doc (showString "wire") , prt 0 wireurl])


instance Print DomainCondition where
  prt i e = case e of
   DisjunctDomainCondition domaincondition0 domaincondition -> prPrec i 0 (concatD [prt 0 domaincondition0 , doc (showString "||") , prt 1 domaincondition])
   ConjunctDomainCondition domaincondition0 domaincondition -> prPrec i 1 (concatD [prt 1 domaincondition0 , doc (showString "&") , prt 2 domaincondition])
   NegatedDomainCondition domaincondition -> prPrec i 2 (concatD [doc (showString "~") , prt 2 domaincondition])
   StructuralDomainCondition rlambdalctxt -> prPrec i 2 (concatD [doc (showString "?") , prt 0 rlambdalctxt])
   BehavioralDomainCondition modality domaincondition -> prPrec i 2 (concatD [prt 0 modality , prt 2 domaincondition])


instance Print Modality where
  prt i e = case e of
   ProbePossibility domaincondition -> prPrec i 0 (concatD [doc (showString "<") , prt 2 domaincondition , doc (showString ">")])


instance Print RLambdaPCtxt where
  prt i e = case e of
   ApplicationPCtxt rlambdapctxt rlambdapctxts -> prPrec i 0 (concatD [prt 0 rlambdapctxt , prt 1 rlambdapctxts , doc (showString ";")])
   AbstractionPCtxt formalpctxts rlambdapctxt -> prPrec i 1 (concatD [doc (showString "lambda") , prt 0 formalpctxts , doc (showString ".") , prt 2 rlambdapctxt])
   KPCtxt continuepctxt -> prPrec i 2 (concatD [prt 0 continuepctxt])
   GroundPCtxt valuepctxt -> prPrec i 2 (concatD [prt 0 valuepctxt])
   MentionPCtxt formalpctxt -> prPrec i 2 (concatD [prt 0 formalpctxt])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 1 x , prt 1 xs])

instance Print ContinuePCtxt where
  prt i e = case e of
   PushPromptPCtxt rlambdapctxt0 rlambdapctxt -> prPrec i 0 (concatD [doc (showString "pushPrompt") , prt 2 rlambdapctxt0 , prt 2 rlambdapctxt])
   SubcontPCtxt rlambdapctxt0 rlambdapctxt -> prPrec i 0 (concatD [doc (showString "withSubCont") , prt 2 rlambdapctxt0 , prt 2 rlambdapctxt])
   PushSubContPCtxt rlambdapctxt0 rlambdapctxt -> prPrec i 0 (concatD [doc (showString "pushSubCont") , prt 2 rlambdapctxt0 , prt 2 rlambdapctxt])


instance Print FormalPCtxt where
  prt i e = case e of
   TranscriptPCtxt rlambdapctxt -> prPrec i 0 (concatD [doc (showString "@") , doc (showString "<") , prt 2 rlambdapctxt , doc (showString ">")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print ValuePCtxt where
  prt i e = case e of
   ValueAddPCtxt valuepctxt0 valuepctxt -> prPrec i 0 (concatD [prt 0 valuepctxt0 , doc (showString "+") , prt 1 valuepctxt])
   ValueMultPCtxt valuepctxt0 valuepctxt -> prPrec i 1 (concatD [prt 1 valuepctxt0 , doc (showString "*") , prt 2 valuepctxt])
   ValueNegPCtxt valuepctxt -> prPrec i 2 (concatD [doc (showString "-") , prt 3 valuepctxt])
   ValueLitPCtxt valueliteral -> prPrec i 3 (concatD [doc (showString "!") , prt 0 valueliteral])
   ValueEmptyPCtxt valuepctxthole -> prPrec i 3 (concatD [prt 0 valuepctxthole])


instance Print RLambdaLCtxt where
  prt i e = case e of
   ApplicationLCtxt rlambdalctxt rlambdalctxts -> prPrec i 0 (concatD [prt 0 rlambdalctxt , prt 1 rlambdalctxts , doc (showString ";")])
   AbstractionLCtxt formallctxts rlambdalctxt -> prPrec i 1 (concatD [doc (showString "lambda") , prt 0 formallctxts , doc (showString ".") , prt 2 rlambdalctxt])
   KLCtxt continuelctxt -> prPrec i 2 (concatD [prt 0 continuelctxt])
   MentionLCtxt formallctxt -> prPrec i 2 (concatD [prt 0 formallctxt])
   GroundLCtxt valuelctxt -> prPrec i 2 (concatD [prt 0 valuelctxt])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 1 x , prt 1 xs])

instance Print ContinueLCtxt where
  prt i e = case e of
   PushPromptLCtxt rlambdalctxt0 rlambdalctxt -> prPrec i 0 (concatD [doc (showString "pushPrompt") , prt 2 rlambdalctxt0 , prt 2 rlambdalctxt])
   SubconLCtxt rlambdalctxt0 rlambdalctxt -> prPrec i 0 (concatD [doc (showString "withSubCont") , prt 2 rlambdalctxt0 , prt 2 rlambdalctxt])
   PushSubContLCtxt rlambdalctxt0 rlambdalctxt -> prPrec i 0 (concatD [doc (showString "pushSubCont") , prt 2 rlambdalctxt0 , prt 2 rlambdalctxt])


instance Print FormalLCtxt where
  prt i e = case e of
   TranscriptLCtxt rlambdalctxt -> prPrec i 0 (concatD [doc (showString "@") , doc (showString "<") , prt 2 rlambdalctxt , doc (showString ">")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print ValueLCtxt where
  prt i e = case e of
   ValueAddLCtxt valuelctxt0 valuelctxt -> prPrec i 0 (concatD [prt 0 valuelctxt0 , doc (showString "+") , prt 1 valuelctxt])
   ValueMultLCtxt valuelctxt0 valuelctxt -> prPrec i 1 (concatD [prt 1 valuelctxt0 , doc (showString "*") , prt 2 valuelctxt])
   ValueNegLCtxt valuelctxt -> prPrec i 2 (concatD [doc (showString "-") , prt 3 valuelctxt])
   ValueLitLCtxt valueliteral -> prPrec i 3 (concatD [doc (showString "!") , prt 0 valueliteral])
   ValueEmptyLCtxt valuelctxthole -> prPrec i 3 (concatD [prt 0 valuelctxthole])


instance Print ValuePCtxtHole where
  prt i e = case e of
   ValPPlaceHolder uident -> prPrec i 0 (concatD [prt 0 uident])
   ValWildCard wild -> prPrec i 0 (concatD [prt 0 wild])


instance Print ValueLCtxtHole where
  prt i e = case e of
   ValLPlaceHolder logicalground -> prPrec i 0 (concatD [prt 0 logicalground])


instance Print LogicalGround where
  prt i e = case e of
   Verity  -> prPrec i 0 (concatD [doc (showString "true")])
   Absurdity  -> prPrec i 0 (concatD [doc (showString "false")])
   Nullity  -> prPrec i 0 (concatD [doc (showString "null")])


instance Print Comparison where
  prt i e = case e of
   Equality  -> prPrec i 0 (concatD [doc (showString "==")])
   Less  -> prPrec i 0 (concatD [doc (showString "<")])
   More  -> prPrec i 0 (concatD [doc (showString ">")])
   LEq  -> prPrec i 0 (concatD [doc (showString "<=")])
   GEq  -> prPrec i 0 (concatD [doc (showString ">=")])


instance Print RLambdaExpr where
  prt i e = case e of
   Application rlambdaexpr rlambdaexprs -> prPrec i 0 (concatD [prt 0 rlambdaexpr , prt 1 rlambdaexprs , doc (showString ";")])
   Abstraction formalexprs rlambdaexpr -> prPrec i 1 (concatD [doc (showString "lambda") , prt 0 formalexprs , doc (showString ".") , prt 2 rlambdaexpr])
   Continuation continueexpr -> prPrec i 1 (concatD [prt 0 continueexpr])
   Mention formalexpr -> prPrec i 2 (concatD [prt 0 formalexpr])
   Value valueexpr -> prPrec i 2 (concatD [prt 0 valueexpr])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 1 x , prt 1 xs])

instance Print ContinueExpr where
  prt i e = case e of
   Prompt  -> prPrec i 0 (concatD [doc (showString "newPrompt")])
   PushPrompt rlambdaexpr0 rlambdaexpr -> prPrec i 0 (concatD [doc (showString "pushPrompt") , prt 2 rlambdaexpr0 , prt 2 rlambdaexpr])
   Subcontinuation rlambdaexpr0 rlambdaexpr -> prPrec i 0 (concatD [doc (showString "withSubCont") , prt 2 rlambdaexpr0 , prt 2 rlambdaexpr])
   PushSubCont rlambdaexpr0 rlambdaexpr -> prPrec i 0 (concatD [doc (showString "pushSubCont") , prt 2 rlambdaexpr0 , prt 2 rlambdaexpr])


instance Print FormalExpr where
  prt i e = case e of
   Transcription rlambdaexpr -> prPrec i 0 (concatD [doc (showString "@") , doc (showString "<") , prt 2 rlambdaexpr , doc (showString ">")])
   AtomLiteral id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print ValueExpr where
  prt i e = case e of
   ValueAddExpr valueexpr0 valueexpr -> prPrec i 0 (concatD [prt 0 valueexpr0 , doc (showString "+") , prt 1 valueexpr])
   ValueMultExpr valueexpr0 valueexpr -> prPrec i 1 (concatD [prt 1 valueexpr0 , doc (showString "*") , prt 2 valueexpr])
   ValueNegExpr valueexpr -> prPrec i 2 (concatD [doc (showString "-") , prt 3 valueexpr])
   ValueLitExpr valueliteral -> prPrec i 3 (concatD [prt 0 valueliteral])


instance Print ValueLiteral where
  prt i e = case e of
   ValueRecLit recordexpr -> prPrec i 0 (concatD [doc (showString "!") , prt 3 recordexpr])
   ValueLamLit rlambdaexpr -> prPrec i 0 (concatD [doc (showString "(") , prt 0 rlambdaexpr , doc (showString ")")])
   ValueIntLit n -> prPrec i 0 (concatD [prt 0 n])
   ValueDoubleLit d -> prPrec i 0 (concatD [prt 0 d])
   ValueStringLit str -> prPrec i 0 (concatD [prt 0 str])
   ValueCharLit c -> prPrec i 0 (concatD [prt 0 c])
   ValueURLLit url -> prPrec i 0 (concatD [prt 0 url])


instance Print StoreURL where
  prt i e = case e of
   RecordStoreURL url -> prPrec i 0 (concatD [prt 0 url])


instance Print WireURL where
  prt i e = case e of
   RecordWireURL url -> prPrec i 0 (concatD [prt 0 url])


instance Print URL where
  prt i e = case e of
   BasicURL urlscheme urlpath -> prPrec i 0 (concatD [doc (showString "<") , prt 0 urlscheme , doc (showString ":") , prt 0 urlpath , doc (showString ">")])


instance Print URLPath where
  prt i e = case e of
   LocatedtedPath urllocation urlrelativepath -> prPrec i 0 (concatD [doc (showString "/") , prt 0 urllocation , prt 0 urlrelativepath])


instance Print URLLocation where
  prt i e = case e of
   URLNetLocation urlroot urlrsrclocation -> prPrec i 0 (concatD [prt 0 urlroot , prt 0 urlrsrclocation])


instance Print URLRsrcLocation where
  prt i e = case e of
   URLRsrcPortLoc netlocation port -> prPrec i 0 (concatD [prt 0 netlocation , doc (showString ":") , prt 0 port])
   URLRsrcLoc netlocation -> prPrec i 0 (concatD [prt 0 netlocation])


instance Print URLRelativePath where
  prt i e = case e of
   SlashPath urlroot urlpathelements -> prPrec i 0 (concatD [prt 0 urlroot , prt 0 urlpathelements])


instance Print URLRoot where
  prt i e = case e of
   URLOrigin  -> prPrec i 0 (concatD [doc (showString "/")])


instance Print NetLocation where
  prt i e = case e of
   DNSAddr dnselements -> prPrec i 0 (concatD [prt 0 dnselements])


instance Print URLScheme where
  prt i e = case e of
   AtomScheme id -> prPrec i 0 (concatD [prt 0 id])


instance Print URLPathElement where
  prt i e = case e of
   AtomPathElement id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString "/") , prt 0 xs])

instance Print DNSElement where
  prt i e = case e of
   AtomDNSElement id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])

instance Print Port where
  prt i e = case e of
   AtomPort n -> prPrec i 0 (concatD [prt 0 n])



