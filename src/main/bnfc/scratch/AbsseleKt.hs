module AbsseleKt where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
newtype UIdent = UIdent String deriving (Eq,Ord,Show)
newtype Wild = Wild String deriving (Eq,Ord,Show)
data RecordExpr =
   Joined RecordExpr RecordExpr
 | Isolated RecordExpr RecordExpr
 | Consed DomainExpr RecordExpr
 | Contexted [Binding] RecordExpr
 | Referenced RecordVariable
 | Collected CollectionExpr
 | Emptied
  deriving (Eq,Ord,Show)

data Binding =
   BindingExpr RecordPtn RecordPtn
  deriving (Eq,Ord,Show)

data RecordPtn =
   RecordDestructor [DomainPtn] RecordPtn
 | RecordLiteral RecordExpr
  deriving (Eq,Ord,Show)

data RecordVariable =
   RecordIdent UIdent
 | RecordWild
  deriving (Eq,Ord,Show)

data CollectionExpr =
   Extension ExtensionBodyExpr
 | Intension IntensionBodyExpr
  deriving (Eq,Ord,Show)

data ExtensionBodyExpr =
   ExtensionBody [DomainExpr]
  deriving (Eq,Ord,Show)

data IntensionBodyExpr =
   IntensionBody DomainPtn [DomainDeclOrCond]
  deriving (Eq,Ord,Show)

data DomainDeclOrCond =
   ConditionIn DomainCond
 | DeclIn DomainGen
  deriving (Eq,Ord,Show)

data DomainGen =
   DomainGenExpr DomainPtn RecordSource
  deriving (Eq,Ord,Show)

data DomainCond =
   DomainSatExpr DomainPtn DomainCondition
 | DomainCompExpr ValueExpr Comparison ValueExpr
  deriving (Eq,Ord,Show)

data DomainPtn =
   DomainPtnExpr RLambdaPCtxt
  deriving (Eq,Ord,Show)

data DomainExpr =
   DomainRLambdaExpr RLambdaExpr
  deriving (Eq,Ord,Show)

data RecordSource =
   OnBoardSource RecordExpr
 | PersistentSource StoreURL
 | WireSource WireURL
  deriving (Eq,Ord,Show)

data DomainCondition =
   DisjunctDomainCondition DomainCondition DomainCondition
 | ConjunctDomainCondition DomainCondition DomainCondition
 | NegatedDomainCondition DomainCondition
 | StructuralDomainCondition RLambdaLCtxt
 | BehavioralDomainCondition Modality DomainCondition
  deriving (Eq,Ord,Show)

data Modality =
   ProbePossibility DomainCondition
  deriving (Eq,Ord,Show)

data RLambdaPCtxt =
   ApplicationPCtxt RLambdaPCtxt [RLambdaPCtxt]
 | AbstractionPCtxt [FormalPCtxt] RLambdaPCtxt
 | KPCtxt ContinuePCtxt
 | GroundPCtxt ValuePCtxt
 | MentionPCtxt FormalPCtxt
  deriving (Eq,Ord,Show)

data ContinuePCtxt =
   PushPromptPCtxt RLambdaPCtxt RLambdaPCtxt
 | SubcontPCtxt RLambdaPCtxt RLambdaPCtxt
 | PushSubContPCtxt RLambdaPCtxt RLambdaPCtxt
  deriving (Eq,Ord,Show)

data FormalPCtxt =
   TranscriptPCtxt RLambdaPCtxt
  deriving (Eq,Ord,Show)

data ValuePCtxt =
   ValueAddPCtxt ValuePCtxt ValuePCtxt
 | ValueMultPCtxt ValuePCtxt ValuePCtxt
 | ValueNegPCtxt ValuePCtxt
 | ValueLitPCtxt ValueLiteral
 | ValueEmptyPCtxt ValuePCtxtHole
  deriving (Eq,Ord,Show)

data RLambdaLCtxt =
   ApplicationLCtxt RLambdaLCtxt [RLambdaLCtxt]
 | AbstractionLCtxt [FormalLCtxt] RLambdaLCtxt
 | KLCtxt ContinueLCtxt
 | MentionLCtxt FormalLCtxt
 | GroundLCtxt ValueLCtxt
  deriving (Eq,Ord,Show)

data ContinueLCtxt =
   PushPromptLCtxt RLambdaLCtxt RLambdaLCtxt
 | SubconLCtxt RLambdaLCtxt RLambdaLCtxt
 | PushSubContLCtxt RLambdaLCtxt RLambdaLCtxt
  deriving (Eq,Ord,Show)

data FormalLCtxt =
   TranscriptLCtxt RLambdaLCtxt
  deriving (Eq,Ord,Show)

data ValueLCtxt =
   ValueAddLCtxt ValueLCtxt ValueLCtxt
 | ValueMultLCtxt ValueLCtxt ValueLCtxt
 | ValueNegLCtxt ValueLCtxt
 | ValueLitLCtxt ValueLiteral
 | ValueEmptyLCtxt ValueLCtxtHole
  deriving (Eq,Ord,Show)

data ValuePCtxtHole =
   ValPPlaceHolder UIdent
 | ValWildCard Wild
  deriving (Eq,Ord,Show)

data ValueLCtxtHole =
   ValLPlaceHolder LogicalGround
  deriving (Eq,Ord,Show)

data LogicalGround =
   Verity
 | Absurdity
 | Nullity
  deriving (Eq,Ord,Show)

data Comparison =
   Equality
 | Less
 | More
 | LEq
 | GEq
  deriving (Eq,Ord,Show)

data RLambdaExpr =
   Application RLambdaExpr [RLambdaExpr]
 | Abstraction [FormalExpr] RLambdaExpr
 | Continuation ContinueExpr
 | Mention FormalExpr
 | Value ValueExpr
  deriving (Eq,Ord,Show)

data ContinueExpr =
   Prompt
 | PushPrompt RLambdaExpr RLambdaExpr
 | Subcontinuation RLambdaExpr RLambdaExpr
 | PushSubCont RLambdaExpr RLambdaExpr
  deriving (Eq,Ord,Show)

data FormalExpr =
   Transcription RLambdaExpr
 | AtomLiteral Ident
  deriving (Eq,Ord,Show)

data ValueExpr =
   ValueAddExpr ValueExpr ValueExpr
 | ValueMultExpr ValueExpr ValueExpr
 | ValueNegExpr ValueExpr
 | ValueLitExpr ValueLiteral
  deriving (Eq,Ord,Show)

data ValueLiteral =
   ValueRecLit RecordExpr
 | ValueLamLit RLambdaExpr
 | ValueIntLit Integer
 | ValueDoubleLit Double
 | ValueStringLit String
 | ValueCharLit Char
 | ValueURLLit URL
  deriving (Eq,Ord,Show)

data StoreURL =
   RecordStoreURL URL
  deriving (Eq,Ord,Show)

data WireURL =
   RecordWireURL URL
  deriving (Eq,Ord,Show)

data URL =
   BasicURL URLScheme URLPath
  deriving (Eq,Ord,Show)

data URLPath =
   LocatedtedPath URLLocation URLRelativePath
  deriving (Eq,Ord,Show)

data URLLocation =
   URLNetLocation URLRoot URLRsrcLocation
  deriving (Eq,Ord,Show)

data URLRsrcLocation =
   URLRsrcPortLoc NetLocation Port
 | URLRsrcLoc NetLocation
  deriving (Eq,Ord,Show)

data URLRelativePath =
   SlashPath URLRoot [URLPathElement]
  deriving (Eq,Ord,Show)

data URLRoot =
   URLOrigin
  deriving (Eq,Ord,Show)

data NetLocation =
   DNSAddr [DNSElement]
  deriving (Eq,Ord,Show)

data URLScheme =
   AtomScheme Ident
  deriving (Eq,Ord,Show)

data URLPathElement =
   AtomPathElement Ident
  deriving (Eq,Ord,Show)

data DNSElement =
   AtomDNSElement Ident
  deriving (Eq,Ord,Show)

data Port =
   AtomPort Integer
  deriving (Eq,Ord,Show)

