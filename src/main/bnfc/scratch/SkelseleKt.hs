module SkelseleKt where

-- Haskell module generated by the BNF converter

import AbsseleKt
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent str  -> failure x


transWild :: Wild -> Result
transWild x = case x of
  Wild str  -> failure x


transRecordExpr :: RecordExpr -> Result
transRecordExpr x = case x of
  Joined recordexpr0 recordexpr  -> failure x
  Isolated recordexpr0 recordexpr  -> failure x
  Consed domainexpr recordexpr  -> failure x
  Contexted bindings recordexpr  -> failure x
  Referenced recordvariable  -> failure x
  Collected collectionexpr  -> failure x
  Emptied  -> failure x


transBinding :: Binding -> Result
transBinding x = case x of
  BindingExpr recordptn0 recordptn  -> failure x


transRecordPtn :: RecordPtn -> Result
transRecordPtn x = case x of
  RecordDestructor domainptns recordptn  -> failure x
  RecordLiteral recordexpr  -> failure x


transRecordVariable :: RecordVariable -> Result
transRecordVariable x = case x of
  RecordIdent uident  -> failure x
  RecordWild  -> failure x


transCollectionExpr :: CollectionExpr -> Result
transCollectionExpr x = case x of
  Extension extensionbodyexpr  -> failure x
  Intension intensionbodyexpr  -> failure x


transExtensionBodyExpr :: ExtensionBodyExpr -> Result
transExtensionBodyExpr x = case x of
  ExtensionBody domainexprs  -> failure x


transIntensionBodyExpr :: IntensionBodyExpr -> Result
transIntensionBodyExpr x = case x of
  IntensionBody domainptn domaindeclorconds  -> failure x


transDomainDeclOrCond :: DomainDeclOrCond -> Result
transDomainDeclOrCond x = case x of
  ConditionIn domaincond  -> failure x
  DeclIn domaingen  -> failure x


transDomainGen :: DomainGen -> Result
transDomainGen x = case x of
  DomainGenExpr domainptn recordsource  -> failure x


transDomainCond :: DomainCond -> Result
transDomainCond x = case x of
  DomainSatExpr domainptn domaincondition  -> failure x
  DomainCompExpr valueexpr0 comparison valueexpr  -> failure x


transDomainPtn :: DomainPtn -> Result
transDomainPtn x = case x of
  DomainPtnExpr rlambdapctxt  -> failure x


transDomainExpr :: DomainExpr -> Result
transDomainExpr x = case x of
  DomainRLambdaExpr rlambdaexpr  -> failure x


transRecordSource :: RecordSource -> Result
transRecordSource x = case x of
  OnBoardSource recordexpr  -> failure x
  PersistentSource storeurl  -> failure x
  WireSource wireurl  -> failure x


transDomainCondition :: DomainCondition -> Result
transDomainCondition x = case x of
  DisjunctDomainCondition domaincondition0 domaincondition  -> failure x
  ConjunctDomainCondition domaincondition0 domaincondition  -> failure x
  NegatedDomainCondition domaincondition  -> failure x
  StructuralDomainCondition rlambdalctxt  -> failure x
  BehavioralDomainCondition modality domaincondition  -> failure x


transModality :: Modality -> Result
transModality x = case x of
  ProbePossibility domaincondition  -> failure x


transRLambdaPCtxt :: RLambdaPCtxt -> Result
transRLambdaPCtxt x = case x of
  ApplicationPCtxt rlambdapctxt rlambdapctxts  -> failure x
  AbstractionPCtxt formalpctxts rlambdapctxt  -> failure x
  KPCtxt continuepctxt  -> failure x
  GroundPCtxt valuepctxt  -> failure x
  MentionPCtxt formalpctxt  -> failure x


transContinuePCtxt :: ContinuePCtxt -> Result
transContinuePCtxt x = case x of
  PushPromptPCtxt rlambdapctxt0 rlambdapctxt  -> failure x
  SubcontPCtxt rlambdapctxt0 rlambdapctxt  -> failure x
  PushSubContPCtxt rlambdapctxt0 rlambdapctxt  -> failure x


transFormalPCtxt :: FormalPCtxt -> Result
transFormalPCtxt x = case x of
  TranscriptPCtxt rlambdapctxt  -> failure x


transValuePCtxt :: ValuePCtxt -> Result
transValuePCtxt x = case x of
  ValueAddPCtxt valuepctxt0 valuepctxt  -> failure x
  ValueMultPCtxt valuepctxt0 valuepctxt  -> failure x
  ValueNegPCtxt valuepctxt  -> failure x
  ValueLitPCtxt valueliteral  -> failure x
  ValueEmptyPCtxt valuepctxthole  -> failure x


transRLambdaLCtxt :: RLambdaLCtxt -> Result
transRLambdaLCtxt x = case x of
  ApplicationLCtxt rlambdalctxt rlambdalctxts  -> failure x
  AbstractionLCtxt formallctxts rlambdalctxt  -> failure x
  KLCtxt continuelctxt  -> failure x
  MentionLCtxt formallctxt  -> failure x
  GroundLCtxt valuelctxt  -> failure x


transContinueLCtxt :: ContinueLCtxt -> Result
transContinueLCtxt x = case x of
  PushPromptLCtxt rlambdalctxt0 rlambdalctxt  -> failure x
  SubconLCtxt rlambdalctxt0 rlambdalctxt  -> failure x
  PushSubContLCtxt rlambdalctxt0 rlambdalctxt  -> failure x


transFormalLCtxt :: FormalLCtxt -> Result
transFormalLCtxt x = case x of
  TranscriptLCtxt rlambdalctxt  -> failure x


transValueLCtxt :: ValueLCtxt -> Result
transValueLCtxt x = case x of
  ValueAddLCtxt valuelctxt0 valuelctxt  -> failure x
  ValueMultLCtxt valuelctxt0 valuelctxt  -> failure x
  ValueNegLCtxt valuelctxt  -> failure x
  ValueLitLCtxt valueliteral  -> failure x
  ValueEmptyLCtxt valuelctxthole  -> failure x


transValuePCtxtHole :: ValuePCtxtHole -> Result
transValuePCtxtHole x = case x of
  ValPPlaceHolder uident  -> failure x
  ValWildCard wild  -> failure x


transValueLCtxtHole :: ValueLCtxtHole -> Result
transValueLCtxtHole x = case x of
  ValLPlaceHolder logicalground  -> failure x


transLogicalGround :: LogicalGround -> Result
transLogicalGround x = case x of
  Verity  -> failure x
  Absurdity  -> failure x
  Nullity  -> failure x


transComparison :: Comparison -> Result
transComparison x = case x of
  Equality  -> failure x
  Less  -> failure x
  More  -> failure x
  LEq  -> failure x
  GEq  -> failure x


transRLambdaExpr :: RLambdaExpr -> Result
transRLambdaExpr x = case x of
  Application rlambdaexpr rlambdaexprs  -> failure x
  Abstraction formalexprs rlambdaexpr  -> failure x
  Continuation continueexpr  -> failure x
  Mention formalexpr  -> failure x
  Value valueexpr  -> failure x


transContinueExpr :: ContinueExpr -> Result
transContinueExpr x = case x of
  Prompt  -> failure x
  PushPrompt rlambdaexpr0 rlambdaexpr  -> failure x
  Subcontinuation rlambdaexpr0 rlambdaexpr  -> failure x
  PushSubCont rlambdaexpr0 rlambdaexpr  -> failure x


transFormalExpr :: FormalExpr -> Result
transFormalExpr x = case x of
  Transcription rlambdaexpr  -> failure x
  AtomLiteral id  -> failure x


transValueExpr :: ValueExpr -> Result
transValueExpr x = case x of
  ValueAddExpr valueexpr0 valueexpr  -> failure x
  ValueMultExpr valueexpr0 valueexpr  -> failure x
  ValueNegExpr valueexpr  -> failure x
  ValueLitExpr valueliteral  -> failure x


transValueLiteral :: ValueLiteral -> Result
transValueLiteral x = case x of
  ValueRecLit recordexpr  -> failure x
  ValueLamLit rlambdaexpr  -> failure x
  ValueIntLit n  -> failure x
  ValueDoubleLit d  -> failure x
  ValueStringLit str  -> failure x
  ValueCharLit c  -> failure x
  ValueURLLit url  -> failure x


transStoreURL :: StoreURL -> Result
transStoreURL x = case x of
  RecordStoreURL url  -> failure x


transWireURL :: WireURL -> Result
transWireURL x = case x of
  RecordWireURL url  -> failure x


transURL :: URL -> Result
transURL x = case x of
  BasicURL urlscheme urlpath  -> failure x


transURLPath :: URLPath -> Result
transURLPath x = case x of
  LocatedtedPath urllocation urlrelativepath  -> failure x


transURLLocation :: URLLocation -> Result
transURLLocation x = case x of
  URLNetLocation urlroot urlrsrclocation  -> failure x


transURLRsrcLocation :: URLRsrcLocation -> Result
transURLRsrcLocation x = case x of
  URLRsrcPortLoc netlocation port  -> failure x
  URLRsrcLoc netlocation  -> failure x


transURLRelativePath :: URLRelativePath -> Result
transURLRelativePath x = case x of
  SlashPath urlroot urlpathelements  -> failure x


transURLRoot :: URLRoot -> Result
transURLRoot x = case x of
  URLOrigin  -> failure x


transNetLocation :: NetLocation -> Result
transNetLocation x = case x of
  DNSAddr dnselements  -> failure x


transURLScheme :: URLScheme -> Result
transURLScheme x = case x of
  AtomScheme id  -> failure x


transURLPathElement :: URLPathElement -> Result
transURLPathElement x = case x of
  AtomPathElement id  -> failure x


transDNSElement :: DNSElement -> Result
transDNSElement x = case x of
  AtomDNSElement id  -> failure x


transPort :: Port -> Result
transPort x = case x of
  AtomPort n  -> failure x



